{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCIA,EAAA,MAAA,CAAA,EAAA,oBAAA,IAAa,GAJb,IAAA,EAAA,EAAA,sBAIM,OAAO,UAA0B,sBACrC,OAA6B,AAC7B,CAAA,QAAyB,AACzB,CAAA,YAAc,CAAE,AAChB,CAAA,cAAuB,AAEvB,CAAA,UAAY,AAAA,CAAA,EAAA,EAAA,YAAA,AAAA,EAAa,IAAI,CAAC,IAAI,CAAE,AAEpC,YAAW,sBAAX,CACE,MAAO,CAAC,CAAE,KAAM,SAAS,EAAG,AAC9B,CAEA,YAAY,CAAE,eAAA,CAAc,CAA8B,CAA1D,CACE,KAAK,GACL,IAAI,CAAC,OAAO,CAAG,MAAM,IAAI,CACvB,CAAE,OAAQ,CAAc,EACxB,IAAM,IAAI,cAEZ,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,OAAO,CAAC,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","sources":["<anon>","packages/base-nodes/src/Oscilloscope/worklet.ts","packages/base-nodes/src/lib/useBroadcast.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0/node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"gwbtz\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AnalyserProcessor\", ()=>AnalyserProcessor);\nvar _useBroadcast = require(\"../lib/useBroadcast\");\nconst DEFAULT_FFT_SIZE = 1024;\nclass AnalyserProcessor extends AudioWorkletProcessor {\n    buffers;\n    isActive;\n    sampleIndex = 0;\n    currentFftSize;\n    broadcast = (0, _useBroadcast.useBroadcast)(this.port);\n    static get parameterDescriptors() {\n        return [\n            {\n                name: \"fftSize\"\n            }\n        ];\n    }\n    constructor({ numberOfInputs }){\n        super();\n        this.buffers = Array.from({\n            length: numberOfInputs\n        }, ()=>new Float32Array());\n        this.isActive = this.buffers.map(()=>true);\n        this.port.start();\n    }\n    process(inputs, _outputs, parameters) {\n        const inputsData = this.buffers.map((_, index)=>inputs[index][0]);\n        const fftSize = parameters.fftSize[0];\n        const analysisWindowSize = fftSize <= 0 ? DEFAULT_FFT_SIZE : fftSize;\n        if (this.currentFftSize !== analysisWindowSize) {\n            this.buffers = this.buffers.map(()=>new Float32Array(analysisWindowSize));\n            this.currentFftSize = analysisWindowSize;\n        }\n        for(let index = 0; index < inputsData.length; index++){\n            const inputData = inputsData[index];\n            if (!inputData && this.isActive[index]) {\n                this.broadcast(new Float32Array(), index);\n                this.isActive[index] = false;\n            }\n            if (inputData && !this.isActive[index]) this.isActive[index] = true;\n        }\n        const samplesCount = inputsData.reduce((acc, inputData)=>inputData?.length ?? acc, 0);\n        for(let i = 0; i < samplesCount; i += 1){\n            if (this.sampleIndex >= analysisWindowSize) {\n                for(let index = 0; index < this.buffers.length; index++)this.broadcast(this.buffers[index], index);\n                this.sampleIndex = 0;\n            }\n            for(let index = 0; index < this.buffers.length; index++)this.buffers[index][this.sampleIndex] = inputsData[index]?.[i];\n            this.sampleIndex += 1;\n        }\n        return true;\n    }\n}\ntry {\n    //@ts-ignore\n    registerProcessor(\"oscilloscope-processor\", AnalyserProcessor);\n} catch (e) {}\n\n},{\"../lib/useBroadcast\":\"eLhYv\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5zHCx\"}],\"eLhYv\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"useBroadcast\", ()=>useBroadcast);\nparcelHelpers.export(exports, \"addBroadcastListener\", ()=>addBroadcastListener);\nparcelHelpers.export(exports, \"removeBroadcastListener\", ()=>removeBroadcastListener);\nconst DEFAULT_POOL_NAME = \"default\";\nconst useBroadcast = (port)=>{\n    const listeners = {\n        [DEFAULT_POOL_NAME]: []\n    };\n    port.addEventListener(\"message\", ({ data })=>{\n        if (data.name === \"ADD_LISTENER\") {\n            const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n    });\n    return (data, index = DEFAULT_POOL_NAME)=>listeners[index]?.forEach((listener)=>listener.postMessage(data));\n};\nconst addBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"ADD_LISTENER\",\n        port: listenerPort,\n        poolName\n    }, [\n        listenerPort\n    ]);\n};\nconst removeBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"REMOVE_LISTENER\",\n        port: listenerPort,\n        poolName\n    }, [\n        listenerPort\n    ]);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5zHCx\"}],\"5zHCx\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"gwbtz\"], \"gwbtz\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=worklet.bd825076.js.map\n","import { useBroadcast } from \"../lib/useBroadcast\";\n\nconst DEFAULT_FFT_SIZE = 1024;\n\nexport class AnalyserProcessor extends AudioWorkletProcessor {\n  buffers: Array<Float32Array>;\n  isActive: Array<boolean>;\n  sampleIndex = 0;\n  currentFftSize: number;\n\n  broadcast = useBroadcast(this.port);\n\n  static get parameterDescriptors() {\n    return [{ name: \"fftSize\" }];\n  }\n\n  constructor({ numberOfInputs }: { numberOfInputs: number }) {\n    super();\n    this.buffers = Array.from(\n      { length: numberOfInputs },\n      () => new Float32Array(),\n    );\n    this.isActive = this.buffers.map(() => true);\n    this.port.start();\n  }\n\n  process(\n    inputs: Float32Array[][],\n    _outputs: Float32Array[][],\n    parameters: { fftSize: Float32Array },\n  ) {\n    const inputsData = this.buffers.map((_, index) => inputs[index][0]);\n\n    const fftSize = parameters.fftSize[0];\n    const analysisWindowSize = fftSize <= 0 ? DEFAULT_FFT_SIZE : fftSize;\n\n    if (this.currentFftSize !== analysisWindowSize) {\n      this.buffers = this.buffers.map(\n        () => new Float32Array(analysisWindowSize),\n      );\n      this.currentFftSize = analysisWindowSize;\n    }\n\n    for (let index = 0; index < inputsData.length; index++) {\n      const inputData = inputsData[index];\n      if (!inputData && this.isActive[index]) {\n        this.broadcast(new Float32Array(), index);\n        this.isActive[index] = false;\n      }\n      if (inputData && !this.isActive[index]) {\n        this.isActive[index] = true;\n      }\n    }\n\n    const samplesCount = inputsData.reduce(\n      (acc, inputData) => inputData?.length ?? acc,\n      0,\n    );\n\n    for (let i = 0; i < samplesCount; i += 1) {\n      if (this.sampleIndex >= analysisWindowSize) {\n        for (let index = 0; index < this.buffers.length; index++) {\n          this.broadcast(this.buffers[index], index);\n        }\n        this.sampleIndex = 0;\n      }\n\n      for (let index = 0; index < this.buffers.length; index++) {\n        this.buffers[index][this.sampleIndex] = inputsData[index]?.[i];\n      }\n      this.sampleIndex += 1;\n    }\n\n    return true;\n  }\n}\n\ntry {\n  //@ts-ignore\n  registerProcessor(\"oscilloscope-processor\", AnalyserProcessor);\n} catch (e) {}\n","type PoolName = string | number;\n\ntype Broadcast = <T = unknown>(data: T, poolName?: PoolName) => void;\n\ninterface AddListenerEvent {\n  name: \"ADD_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ninterface RemoveListenerEvent {\n  name: \"REMOVE_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ntype UseBroadcastEvent = AddListenerEvent | RemoveListenerEvent;\n\nconst DEFAULT_POOL_NAME = \"default\";\n\nexport const useBroadcast = (port: MessagePort): Broadcast => {\n  const listeners: Record<PoolName, Array<MessagePort>> = {\n    [DEFAULT_POOL_NAME]: [],\n  };\n  port.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<UseBroadcastEvent>) => {\n      if (data.name === \"ADD_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n    }\n  );\n\n  return (data, index = DEFAULT_POOL_NAME) =>\n    listeners[index]?.forEach((listener) => listener.postMessage(data));\n};\n\nexport const addBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"ADD_LISTENER\",\n      port: listenerPort,\n      poolName,\n    },\n    [listenerPort]\n  );\n};\n\nexport const removeBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"REMOVE_LISTENER\",\n      port: listenerPort,\n      poolName,\n    },\n    [listenerPort]\n  );\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","AnalyserProcessor","_useBroadcast","AudioWorkletProcessor","buffers","isActive","sampleIndex","currentFftSize","broadcast","useBroadcast","port","parameterDescriptors","constructor","numberOfInputs","Array","from","Float32Array","map","start","process","inputs","_outputs","parameters","inputsData","_","index","fftSize","analysisWindowSize","inputData","samplesCount","reduce","acc","registerProcessor","e","addBroadcastListener","removeBroadcastListener","DEFAULT_POOL_NAME","listeners","addEventListener","data","poolName","push","forEach","listener","postMessage","broadcastPort","listenerPort","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"worklet.bd825076.js.map"}
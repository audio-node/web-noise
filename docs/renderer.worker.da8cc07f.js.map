{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,MCYI,EACA,EAQA,EArBJ,IAAA,EAAA,EAAA,WAcA,IAAI,EAAqB,CACvB,OAAQ,UACR,MAAO,UACP,QAAS,UACT,QAAS,SACV,EAOK,EAAiB,AAAC,GACtB,EAJ0B,KACE,KAK9B,SAAS,EACP,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAa,EAEb,EAAc,WAAW,CAAG,EAC5B,EAAc,SAAS,GACvB,EAAc,MAAM,CAAC,EAAI,GACzB,EAAc,MAAM,CAAC,EAAI,GACzB,EAAc,MAAM,EACtB,CAEA,IAAM,EAAY,CAChB,EACA,EACA,EACA,EACA,EACA,KAEA,EAAc,WAAW,CAAG,EAC5B,EAAc,SAAS,GAEvB,IAAK,IAAI,EAAI,EAAG,GAAK,EAAG,GADX,IACsB,CAEjC,IAAM,EAAI,EAAK,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","sources":["<anon>","packages/base-nodes/src/ADSR/renderer.worker.ts","packages/base-nodes/src/ADSR/types.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0/node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"keD2E\":[function(require,module,exports) {\nvar _types = require(\"./types\");\n//scope variables\nlet canvas;\nlet canvasContext;\nlet colors = {\n    attack: \"#ff0033\",\n    decay: \"#ff7300\",\n    sustain: \"#fbff00\",\n    release: \"#14df42\"\n};\nlet values;\nconst ACTIVE_COLOR_SUFFIX = \"ff\";\nconst INACTIVE_COLOR_SUFFIX = \"aa\";\nconst getColorSuffix = (isActive)=>isActive ? ACTIVE_COLOR_SUFFIX : INACTIVE_COLOR_SUFFIX;\nfunction drawLine(x1, y1, x2, y2, color) {\n    canvasContext.strokeStyle = color;\n    canvasContext.beginPath();\n    canvasContext.moveTo(x1, y1);\n    canvasContext.lineTo(x2, y2);\n    canvasContext.stroke();\n}\nconst drawCurve = (x1, y1, x2, y2, exponent, color)=>{\n    canvasContext.strokeStyle = color;\n    canvasContext.beginPath();\n    const step = 0.01;\n    for(let t = 0; t <= 1; t += step){\n        const pow = 1 - exponent + 0.001;\n        const x = x1 + t * (x2 - x1);\n        const y = y1 + Math.pow(t, pow) * (y2 - y1);\n        canvasContext.lineTo(x, y);\n    }\n    canvasContext.stroke();\n};\nconst drawADSR = (attackTime, attackCurveExponent, decayTime, sustainLevel, releaseTime, phase)=>{\n    const canvas = canvasContext.canvas;\n    const { width, height } = canvas;\n    const normalizedExponent = Math.max(0, Math.min(1, attackCurveExponent));\n    const sum = attackTime + decayTime + releaseTime;\n    const totalDuration = sum + sum / 4;\n    // Convert times to pixel coordinates\n    const attackWidth = attackTime / totalDuration * width;\n    const decayWidth = decayTime / totalDuration * width;\n    const releaseWidth = releaseTime / totalDuration * width;\n    // Clear the canvas\n    canvasContext.clearRect(0, 0, width, height);\n    canvasContext.lineWidth = 2;\n    canvasContext.shadowColor = \"rgb(0,0,0)\";\n    canvasContext.shadowOffsetX = 3;\n    canvasContext.shadowOffsetY = 3;\n    canvasContext.shadowBlur = 10;\n    // Draw Attack\n    drawCurve(0, 0, attackWidth, height, normalizedExponent, `${colors.attack}${getColorSuffix(phase === (0, _types.PHASES).ATTACK)}`);\n    // Draw Decay\n    drawLine(attackWidth, height, attackWidth + decayWidth, height - (1 - sustainLevel) * height, `${colors.decay}${getColorSuffix(phase === (0, _types.PHASES).DECAY)}`);\n    // Draw Sustain\n    drawLine(attackWidth + decayWidth, sustainLevel * height, width - releaseWidth, sustainLevel * height, `${colors.sustain}${getColorSuffix(phase === (0, _types.PHASES).SUSTAIN)}`);\n    // Draw Release\n    drawLine(width - releaseWidth, sustainLevel * height, width, 0, `${colors.release}${getColorSuffix(phase === (0, _types.PHASES).RELEASE)}`);\n};\nconst render = ()=>{\n    if (!canvasContext || !values) {\n        requestAnimationFrame(render);\n        return;\n    }\n    drawADSR(values.attack, values.attackCurve, values.decay, values.sustain, values.release, values.phase);\n    requestAnimationFrame(render);\n};\n//event handling\nonmessage = function({ data }) {\n    if (data.name === (0, _types.WorkerEventNames).INIT) {\n        canvas = data.canvas;\n        canvasContext = canvas.getContext(\"2d\");\n        canvasContext.transform(1, 0, 0, -1, 0, canvas.height); //flip y-axis\n        data.port.onmessage = ({ data })=>{\n            values = {\n                ...data\n            };\n        };\n        requestAnimationFrame(render);\n    }\n    if (data.name === (0, _types.WorkerEventNames).SET_COLORS) colors = {\n        ...data.colors\n    };\n};\n\n},{\"./types\":\"ktY5A\"}],\"ktY5A\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"ADSRParameters\", ()=>ADSRParameters);\nparcelHelpers.export(exports, \"PHASES\", ()=>PHASES);\nparcelHelpers.export(exports, \"WorkerEventNames\", ()=>WorkerEventNames);\nvar ADSRParameters;\n(function(ADSRParameters) {\n    ADSRParameters[\"A\"] = \"attack\";\n    ADSRParameters[\"AttackCurve\"] = \"attackCurve\";\n    ADSRParameters[\"D\"] = \"decay\";\n    ADSRParameters[\"S\"] = \"sustain\";\n    ADSRParameters[\"R\"] = \"release\";\n    ADSRParameters[\"Trigger\"] = \"trigger\";\n})(ADSRParameters || (ADSRParameters = {}));\nvar PHASES;\n(function(PHASES) {\n    PHASES[\"IDLE\"] = \"idle\";\n    PHASES[\"ATTACK\"] = \"attack\";\n    PHASES[\"DECAY\"] = \"decay\";\n    PHASES[\"SUSTAIN\"] = \"sustain\";\n    PHASES[\"RELEASE\"] = \"release\";\n})(PHASES || (PHASES = {}));\nvar WorkerEventNames;\n(function(WorkerEventNames) {\n    WorkerEventNames[\"INIT\"] = \"INIT\";\n    WorkerEventNames[\"SET_COLORS\"] = \"SET_COLORS\";\n})(WorkerEventNames || (WorkerEventNames = {}));\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5zHCx\"}],\"5zHCx\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"keD2E\"], \"keD2E\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=renderer.worker.da8cc07f.js.map\n","import {\n  ADSREventData,\n  PHASES,\n  InitEvent,\n  SetColorsEvent,\n  WorkerEventNames,\n  ADSRColors,\n} from \"./types\";\n\ntype WorkerEvent = MessageEvent<InitEvent | SetColorsEvent>;\n\n//scope variables\nlet canvas: any;\nlet canvasContext: CanvasRenderingContext2D;\nlet colors: ADSRColors = {\n  attack: \"#ff0033\",\n  decay: \"#ff7300\",\n  sustain: \"#fbff00\",\n  release: \"#14df42\",\n};\n\nlet values: ADSREventData;\n\nconst ACTIVE_COLOR_SUFFIX = \"ff\";\nconst INACTIVE_COLOR_SUFFIX = \"aa\";\n\nconst getColorSuffix = (isActive: boolean) =>\n  isActive ? ACTIVE_COLOR_SUFFIX : INACTIVE_COLOR_SUFFIX;\n\nfunction drawLine(\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  color: string,\n) {\n  canvasContext.strokeStyle = color;\n  canvasContext.beginPath();\n  canvasContext.moveTo(x1, y1);\n  canvasContext.lineTo(x2, y2);\n  canvasContext.stroke();\n}\n\nconst drawCurve = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  exponent: number,\n  color: string,\n) => {\n  canvasContext.strokeStyle = color;\n  canvasContext.beginPath();\n  const step = 0.01;\n  for (let t = 0; t <= 1; t += step) {\n    const pow = 1 - exponent + 0.001;\n    const x = x1 + t * (x2 - x1);\n    const y = y1 + Math.pow(t, pow) * (y2 - y1);\n    canvasContext.lineTo(x, y);\n  }\n  canvasContext.stroke();\n};\n\nconst drawADSR = (\n  attackTime: number,\n  attackCurveExponent: number,\n  decayTime: number,\n  sustainLevel: number,\n  releaseTime: number,\n  phase: PHASES,\n) => {\n  const canvas = canvasContext.canvas;\n  const { width, height } = canvas;\n  const normalizedExponent = Math.max(0, Math.min(1, attackCurveExponent));\n\n  const sum = attackTime + decayTime + releaseTime;\n  const totalDuration = sum + sum / 4;\n\n  // Convert times to pixel coordinates\n  const attackWidth = (attackTime / totalDuration) * width;\n  const decayWidth = (decayTime / totalDuration) * width;\n  const releaseWidth = (releaseTime / totalDuration) * width;\n\n  // Clear the canvas\n  canvasContext.clearRect(0, 0, width, height);\n\n  canvasContext.lineWidth = 2;\n  canvasContext.shadowColor = \"rgb(0,0,0)\";\n  canvasContext.shadowOffsetX = 3;\n  canvasContext.shadowOffsetY = 3;\n  canvasContext.shadowBlur = 10;\n\n  // Draw Attack\n  drawCurve(\n    0,\n    0,\n    attackWidth,\n    height,\n    normalizedExponent,\n    `${colors.attack}${getColorSuffix(phase === PHASES.ATTACK)}`,\n  );\n\n  // Draw Decay\n  drawLine(\n    attackWidth,\n    height,\n    attackWidth + decayWidth,\n    height - (1 - sustainLevel) * height,\n    `${colors.decay}${getColorSuffix(phase === PHASES.DECAY)}`,\n  );\n\n  // Draw Sustain\n  drawLine(\n    attackWidth + decayWidth,\n    sustainLevel * height,\n    width - releaseWidth,\n    sustainLevel * height,\n    `${colors.sustain}${getColorSuffix(phase === PHASES.SUSTAIN)}`,\n  );\n\n  // Draw Release\n  drawLine(\n    width - releaseWidth,\n    sustainLevel * height,\n    width,\n    0,\n    `${colors.release}${getColorSuffix(phase === PHASES.RELEASE)}`,\n  );\n};\n\nconst render = () => {\n  if (!canvasContext || !values) {\n    requestAnimationFrame(render);\n    return;\n  }\n\n  drawADSR(\n    values.attack,\n    values.attackCurve,\n    values.decay,\n    values.sustain,\n    values.release,\n    values.phase,\n  );\n\n  requestAnimationFrame(render);\n};\n\n//event handling\nonmessage = function ({ data }: WorkerEvent) {\n  if (data.name === WorkerEventNames.INIT) {\n    canvas = data.canvas;\n    canvasContext = canvas.getContext(\"2d\");\n    canvasContext.transform(1, 0, 0, -1, 0, canvas.height); //flip y-axis\n\n    data.port.onmessage = ({ data }: { data: ADSREventData }) => {\n      values = {\n        ...data,\n      };\n    };\n    requestAnimationFrame(render);\n  }\n  if (data.name === WorkerEventNames.SET_COLORS) {\n    colors = { ...data.colors };\n  }\n};\n","import { WNNodeProps, WNNodeData } from \"@web-noise/core\";\n\nexport enum ADSRParameters {\n  A = \"attack\",\n  AttackCurve = \"attackCurve\",\n  D = \"decay\",\n  S = \"sustain\",\n  R = \"release\",\n  Trigger = \"trigger\",\n}\n\nexport enum PHASES {\n  IDLE = \"idle\",\n  ATTACK = \"attack\",\n  DECAY = \"decay\",\n  SUSTAIN = \"sustain\",\n  RELEASE = \"release\",\n}\n\nexport interface ADSREventData {\n  attack: number;\n  attackCurve: number;\n  decay: number;\n  sustain: number;\n  release: number;\n  phase: PHASES;\n}\n\nexport enum WorkerEventNames {\n  INIT = 'INIT',\n  SET_COLORS = 'SET_COLORS'\n}\n\nexport interface InitEvent {\n  name: WorkerEventNames.INIT;\n  canvas: OffscreenCanvas;\n  port: MessagePort;\n}\n\nexport interface ADSRColors {\n  attack: string;\n  decay: string;\n  sustain: string;\n  release: string;\n}\n\nexport interface SetColorsEvent {\n  name: WorkerEventNames.SET_COLORS;\n  colors: ADSRColors;\n}\n\nexport interface ADSRValues {}\n\nexport interface ADSRConfig {\n  backgroundColor?: string;\n  colors?: ADSRColors;\n  size?: { width: number; height: number };\n}\n\nexport type ADSRData = WNNodeData<ADSRValues, ADSRConfig>;\n\nexport interface ADSRProps extends WNNodeProps<ADSRData> {}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","canvas","canvasContext","values","_types","colors","attack","decay","sustain","release","getColorSuffix","isActive","drawLine","x1","y1","x2","y2","color","strokeStyle","beginPath","moveTo","lineTo","stroke","drawCurve","exponent","t","y","Math","pow","drawADSR","attackTime","attackCurveExponent","decayTime","sustainLevel","releaseTime","phase","width","height","normalizedExponent","max","min","sum","totalDuration","attackWidth","decayWidth","releaseWidth","clearRect","lineWidth","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","PHASES","ATTACK","DECAY","SUSTAIN","RELEASE","render","requestAnimationFrame","attackCurve","onmessage","data","WorkerEventNames","INIT","getContext","transform","port","SET_COLORS","ADSRParameters","parcelHelpers","defineInteropFlag","export","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","forEach","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"renderer.worker.da8cc07f.js.map"}
{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCYA,EAAA,MAAA,CAAA,EAAA,sBAAA,IAAa,G,I,E,E,mCAZb,EAAA,EAAA,yBAYM,OAAO,UAA4B,sBAavC,WAAW,sBAAX,CACE,MAAO,CACL,CACE,KAAM,OACN,eAAgB,SAChB,aAAc,EACd,SAAU,EACV,SAAU,CACX,EACD,CACE,KAAM,UACN,eAAgB,SAChB,aAAc,EACd,SAAU,EACV,SAAU,CACX,EACD,CACE,KAAM,OACN,eAAgB,SAChB,aAAc,EACd,SAAU,CACX,EACD,CACE,KAAM,QACN,eAAgB,SAChB,aAAc,EACd,SAAU,CACX,EACD,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","sources":["<anon>","packages/base-nodes/src/webNoise/AudioTrack/worklet.ts","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","packages/base-nodes/src/lib/useBroadcast.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (\n  modules,\n  entry,\n  mainEntry,\n  parcelRequireName,\n  externals,\n  distDir,\n  publicUrl,\n  devServer\n) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var importMap = previousRequire.i || {};\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        if (externals[name]) {\n          return externals[name];\n        }\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.require = nodeRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.distDir = distDir;\n  newRequire.publicUrl = publicUrl;\n  newRequire.devServer = devServer;\n  newRequire.i = importMap;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  // Only insert newRequire.load when it is actually used.\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\n  // INSERT_LOAD_HERE\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n    }\n  }\n})({\"6bE6Q\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AudioTrackProcessor\", ()=>AudioTrackProcessor);\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _useBroadcast = require(\"../../lib/useBroadcast\");\nconst GATE_THRESHOLD = 0.5;\nclass AudioTrackProcessor extends AudioWorkletProcessor {\n    static get parameterDescriptors() {\n        return [\n            {\n                name: \"gate\",\n                automationRate: \"a-rate\",\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1\n            },\n            {\n                name: \"restart\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1\n            },\n            {\n                name: \"loop\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            },\n            {\n                name: \"start\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            },\n            {\n                name: \"end\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            },\n            {\n                name: \"detune\",\n                automationRate: \"k-rate\",\n                defaultValue: 0\n            },\n            {\n                name: \"playbackRate\",\n                automationRate: \"k-rate\"\n            }\n        ];\n    }\n    emitProgressEvent() {\n        if (this.cursor === this.prevCursor) return;\n        this.broadcast({\n            name: \"time\",\n            cursor: this.cursor,\n            seconds: this.cursor / sampleRate,\n            progress: this.data ? this.cursor / this.data.length : 0\n        });\n        this.prevCursor = this.cursor;\n    }\n    useTrigger(channel, onTriggerCallback) {\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= GATE_THRESHOLD && !this.isTriggered) {\n                this.isTriggered = true;\n                onTriggerCallback();\n            }\n            if (value < GATE_THRESHOLD && this.isTriggered) this.isTriggered = false;\n        }\n    }\n    useGate(channel, onPlayCallback, onStopCallback) {\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= GATE_THRESHOLD && !this.isPlaying) this.isPlaying = true;\n            if (value < GATE_THRESHOLD && this.isPlaying) this.isPlaying = false;\n        }\n        if (this.isPlaying) onPlayCallback();\n        else onStopCallback();\n    }\n    process(inputs, outputs, parameters) {\n        if (!this.data) return true;\n        const { gate, loop, start, end, restart, detune, playbackRate } = parameters;\n        const [output, gateOutput, durationOutput, currentTimeOutput] = outputs;\n        // handle range change\n        if (start[0] !== this.prevStart || end[0] !== this.prevEnd) {\n            this.prevStart = start[0];\n            this.prevEnd = end[0];\n            this.broadcast({\n                name: \"range\",\n                data: [\n                    start[0],\n                    end[0] || this.data.duration\n                ]\n            });\n        }\n        durationOutput.forEach((channel, index)=>{\n            for(let i = 0; i < channel.length; i++)channel[i] = this.data.duration;\n        });\n        this.useTrigger(restart, ()=>{\n            this.cursor = start[0] * sampleRate;\n        });\n        this.useGate(gate, ()=>{\n            const detuneValue = detune[0];\n            // @TODO: better handle default value\n            const basePlaybackRate = playbackRate[0] || 1;\n            const finalPlaybackRate = basePlaybackRate * Math.pow(2, detuneValue / 1200);\n            // @TODO: handle backwards playback loop\n            const bufferLength = outputs[0][0].length; // Linear interpolation for sample rate conversion\n            /**\n             * Fills the output buffer with audio data from the source, applying\n             * a pitch shift via linear interpolation.\n             */ output.forEach((channel, index)=>{\n                /** The source audio data for the current channel. */ const sourceChannel = this.data.channelData[index];\n                for(let i = 0; i < bufferLength; i++){\n                    /**\n                     * The exact (potentially fractional) position in the source data\n                     * for the current sample, adjusted by the playback rate.\n                     */ const position = this.cursor + i * finalPlaybackRate;\n                    /** The index of the first sample used for interpolation. */ const startSampleIndex = Math.floor(position);\n                    /** The index of the second sample used for interpolation. */ const endSampleIndex = startSampleIndex + 1;\n                    /** The value of the first sample, or 0 if it's out of bounds. */ const startSampleValue = sourceChannel[startSampleIndex] || 0;\n                    /** The value of the second sample, or 0 if it's out of bounds. */ const endSampleValue = sourceChannel[endSampleIndex] || 0;\n                    /** The fractional part of the position, used for blending the two samples. */ const fractionalPart = position - startSampleIndex;\n                    /**\n                     * Calculate the new sample value using linear interpolation.\n                     * The formula blends `startSampleValue` and `endSampleValue`\n                     * based on the `fractionalPart`.\n                     */ channel[i] = startSampleValue + (endSampleValue - startSampleValue) * fractionalPart;\n                }\n            });\n            const endCursor = (end[0] || this.data.duration) * sampleRate;\n            const nextCursor = this.cursor + bufferLength * finalPlaybackRate;\n            if (nextCursor >= endCursor) {\n                if (loop[0] === 1) this.cursor = start[0] * sampleRate;\n                else this.cursor = endCursor + 1;\n            } else if (nextCursor <= 0) {\n                if (loop[0] === 1) this.cursor = endCursor;\n                else this.cursor = 0;\n            } else this.cursor = nextCursor;\n            const isPlaying = this.cursor > 0 && this.cursor < endCursor;\n            gateOutput.forEach((channel)=>{\n                channel.fill(+isPlaying);\n            });\n            this.emitProgressEvent();\n        }, ()=>{\n            gateOutput.forEach((channel)=>{\n                channel.fill(0);\n            });\n            this.cursor = start[0] * sampleRate;\n            this.emitProgressEvent();\n        });\n        currentTimeOutput.forEach((outputChannel, channelIndex)=>{\n            for(let sampleIndex = 0; sampleIndex < outputChannel.length; sampleIndex++)outputChannel[sampleIndex] = this.cursor / sampleRate;\n        });\n        return true;\n    }\n    constructor(){\n        super(), (0, _defineProperty._)(this, \"data\", null), (0, _defineProperty._)(this, \"prevGateState\", false), (0, _defineProperty._)(this, \"isTriggered\", false), (0, _defineProperty._)(this, \"isPlaying\", false), (0, _defineProperty._)(this, \"cursor\", 0), (0, _defineProperty._)(this, \"prevCursor\", 0), (0, _defineProperty._)(this, \"prevStart\", null), (0, _defineProperty._)(this, \"prevEnd\", null), (0, _defineProperty._)(this, \"broadcast\", (0, _useBroadcast.useBroadcast)(this.port));\n        this.port.start();\n        this.port.onmessage = ({ data })=>{\n            if (data.name === \"track\") {\n                this.data = data.data;\n                this.broadcast({\n                    name: \"track\",\n                    data: data.data\n                });\n            }\n            if (data.name === \"data-chunk\") {\n                if (!this.data) this.data = {\n                    duration: 0,\n                    length: 0,\n                    sampleRate: sampleRate,\n                    channelData: [\n                        new Float32Array(0),\n                        new Float32Array(0)\n                    ]\n                };\n                this.data.channelData.forEach((channel, index)=>{\n                    const newChannel = data.data[index] || data.data[0];\n                    const combined = new Float32Array(channel.length + newChannel.length);\n                    combined.set(channel);\n                    combined.set(newChannel, channel.length);\n                    this.data.channelData[index] = combined;\n                });\n                this.data.length = this.data.channelData[0].length;\n                this.data.duration = this.data.length / this.data.sampleRate;\n                this.broadcast({\n                    name: \"track\",\n                    data: this.data\n                });\n            }\n        };\n    }\n}\ntry {\n    //@ts-ignore\n    registerProcessor(\"audio-track-processor\", AudioTrackProcessor);\n} catch (e) {}\n\n},{\"@swc/helpers/_/_define_property\":\"dIIHJ\",\"../../lib/useBroadcast\":\"eLhYv\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"dIIHJ\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", ()=>_define_property);\nfunction _define_property(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"c8FVb\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"eLhYv\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Events\", ()=>Events);\nparcelHelpers.export(exports, \"useBroadcast\", ()=>useBroadcast);\nparcelHelpers.export(exports, \"addBroadcastListener\", ()=>addBroadcastListener);\nparcelHelpers.export(exports, \"removeBroadcastListener\", ()=>removeBroadcastListener);\nvar Events;\n(function(Events) {\n    Events[\"ADD_LISTENER\"] = \"ADD_LISTENER\";\n    Events[\"REMOVE_LISTENER\"] = \"REMOVE_LISTENER\";\n})(Events || (Events = {}));\nconst DEFAULT_POOL_NAME = \"default\";\nconst useBroadcast = (port)=>{\n    const listeners = {\n        [DEFAULT_POOL_NAME]: []\n    };\n    port.addEventListener(\"message\", ({ data })=>{\n        if (data.name === \"ADD_LISTENER\") {\n            var _data_poolName;\n            const poolName = (_data_poolName = data.poolName) !== null && _data_poolName !== void 0 ? _data_poolName : DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n        if (data.name === \"REMOVE_LISTENER\") {\n            var _data_poolName1;\n            const poolName = (_data_poolName1 = data.poolName) !== null && _data_poolName1 !== void 0 ? _data_poolName1 : DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n    });\n    return (data, index = DEFAULT_POOL_NAME)=>{\n        var _listeners_index;\n        return (_listeners_index = listeners[index]) === null || _listeners_index === void 0 ? void 0 : _listeners_index.forEach((listener)=>listener.postMessage(data));\n    };\n};\nconst addBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"ADD_LISTENER\",\n        port: listenerPort,\n        poolName\n    }, [\n        listenerPort\n    ]);\n};\nconst removeBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"REMOVE_LISTENER\",\n        // port: listenerPort,\n        poolName\n    }, []);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}]},[\"6bE6Q\"], \"6bE6Q\", \"parcelRequirec6d8\", {})\n\n//# sourceMappingURL=worklet.34ff0a41.js.map\n","import { useBroadcast } from \"../../lib/useBroadcast\";\nimport { MessageData, RangeEvent, TimeEvent, TrackEvent } from \"./types\";\n\ninterface TrackData {\n  duration: AudioBuffer[\"duration\"];\n  length: AudioBuffer[\"length\"];\n  sampleRate: AudioBuffer[\"sampleRate\"];\n  channelData: [Float32Array, Float32Array];\n}\n\nconst GATE_THRESHOLD = 0.5;\n\nexport class AudioTrackProcessor extends AudioWorkletProcessor {\n  data: TrackData | null = null;\n  prevGateState: boolean = false;\n  isTriggered: boolean = false;\n  isPlaying: boolean = false;\n  cursor: number = 0;\n  prevCursor: number = 0;\n\n  prevStart: number | null = null;\n  prevEnd: number | null = null;\n\n  broadcast = useBroadcast(this.port);\n\n  static get parameterDescriptors() {\n    return [\n      {\n        name: \"gate\",\n        automationRate: \"a-rate\",\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n      },\n      {\n        name: \"restart\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n      },\n      {\n        name: \"loop\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n      {\n        name: \"start\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n      {\n        name: \"end\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n      {\n        name: \"detune\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n      },\n      {\n        name: \"playbackRate\",\n        automationRate: \"k-rate\",\n      },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.port.start();\n\n    this.port.onmessage = ({ data }: MessageEvent<MessageData>) => {\n      if (data.name === \"track\") {\n        this.data = data.data;\n\n        this.broadcast<TrackEvent>({\n          name: \"track\",\n          data: data.data,\n        });\n      }\n\n      if (data.name === \"data-chunk\") {\n        if (!this.data) {\n          this.data = {\n            duration: 0,\n            length: 0,\n            sampleRate: sampleRate,\n            channelData: [new Float32Array(0), new Float32Array(0)],\n          };\n        }\n\n        this.data.channelData.forEach((channel, index) => {\n          const newChannel = data.data[index] || data.data[0];\n          const combined = new Float32Array(channel.length + newChannel.length);\n          combined.set(channel);\n          combined.set(newChannel, channel.length);\n          this.data!.channelData[index] = combined;\n        });\n\n        this.data.length = this.data.channelData[0].length;\n        this.data.duration = this.data.length / this.data.sampleRate;\n\n        this.broadcast<TrackEvent>({\n          name: \"track\",\n          data: this.data,\n        });\n      }\n    };\n  }\n\n  emitProgressEvent() {\n    if (this.cursor === this.prevCursor) {\n      return;\n    }\n    this.broadcast<TimeEvent>({\n      name: \"time\",\n      cursor: this.cursor,\n      seconds: this.cursor / sampleRate,\n      progress: this.data ? this.cursor / this.data.length : 0,\n    });\n    this.prevCursor = this.cursor;\n  }\n\n  useTrigger(channel: Float32Array, onTriggerCallback: () => void) {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= GATE_THRESHOLD && !this.isTriggered) {\n        this.isTriggered = true;\n        onTriggerCallback();\n      }\n      if (value < GATE_THRESHOLD && this.isTriggered) {\n        this.isTriggered = false;\n      }\n    }\n  } // @TODO: use `createUseGate`\n\n  useGate(\n    channel: Float32Array,\n    onPlayCallback: () => void,\n    onStopCallback: () => void,\n  ) {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= GATE_THRESHOLD && !this.isPlaying) {\n        this.isPlaying = true;\n      }\n      if (value < GATE_THRESHOLD && this.isPlaying) {\n        this.isPlaying = false;\n      }\n    }\n    if (this.isPlaying) {\n      onPlayCallback();\n    } else {\n      onStopCallback();\n    }\n  }\n\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: {\n      gate: Float32Array;\n      restart: Float32Array;\n      start: Float32Array;\n      end: Float32Array;\n      loop: Float32Array;\n      detune: Float32Array;\n      playbackRate: Float32Array;\n    },\n  ) {\n    if (!this.data) {\n      return true;\n    }\n    const { gate, loop, start, end, restart, detune, playbackRate } =\n      parameters;\n    const [output, gateOutput, durationOutput, currentTimeOutput] = outputs;\n\n    // handle range change\n    if (start[0] !== this.prevStart || end[0] !== this.prevEnd) {\n      this.prevStart = start[0];\n      this.prevEnd = end[0];\n      this.broadcast<RangeEvent>({\n        name: \"range\",\n        data: [start[0], end[0] || this.data.duration],\n      });\n    }\n\n    durationOutput.forEach((channel, index) => {\n      for (let i = 0; i < channel.length; i++) {\n        channel[i] = this.data!.duration;\n      }\n    });\n\n    this.useTrigger(restart, () => {\n      this.cursor = start[0] * sampleRate;\n    });\n\n    this.useGate(\n      gate,\n      () => {\n        const detuneValue = detune[0];\n        // @TODO: better handle default value\n        const basePlaybackRate = playbackRate[0] || 1;\n        const finalPlaybackRate =\n          basePlaybackRate * Math.pow(2, detuneValue / 1200);\n\n        // @TODO: handle backwards playback loop\n\n        const bufferLength = outputs[0][0].length; // Linear interpolation for sample rate conversion\n\n        /**\n         * Fills the output buffer with audio data from the source, applying\n         * a pitch shift via linear interpolation.\n         */\n        output.forEach((channel, index) => {\n          /** The source audio data for the current channel. */\n          const sourceChannel = this.data!.channelData[index];\n          for (let i = 0; i < bufferLength; i++) {\n            /**\n             * The exact (potentially fractional) position in the source data\n             * for the current sample, adjusted by the playback rate.\n             */\n            const position = this.cursor + i * finalPlaybackRate;\n            /** The index of the first sample used for interpolation. */\n            const startSampleIndex = Math.floor(position);\n            /** The index of the second sample used for interpolation. */\n            const endSampleIndex = startSampleIndex + 1;\n            /** The value of the first sample, or 0 if it's out of bounds. */\n            const startSampleValue = sourceChannel[startSampleIndex] || 0;\n            /** The value of the second sample, or 0 if it's out of bounds. */\n            const endSampleValue = sourceChannel[endSampleIndex] || 0;\n            /** The fractional part of the position, used for blending the two samples. */\n            const fractionalPart = position - startSampleIndex;\n            /**\n             * Calculate the new sample value using linear interpolation.\n             * The formula blends `startSampleValue` and `endSampleValue`\n             * based on the `fractionalPart`.\n             */\n            channel[i] =\n              startSampleValue +\n              (endSampleValue - startSampleValue) * fractionalPart;\n          }\n        });\n\n        const endCursor = (end[0] || this.data!.duration) * sampleRate;\n        const nextCursor = this.cursor + bufferLength * finalPlaybackRate;\n\n        if (nextCursor >= endCursor) {\n          if (loop[0] === 1) {\n            this.cursor = start[0] * sampleRate;\n          } else {\n            this.cursor = endCursor + 1;\n          }\n        } else if (nextCursor <= 0) {\n          if (loop[0] === 1) {\n            this.cursor = endCursor;\n          } else {\n            this.cursor = 0;\n          }\n        } else {\n          this.cursor = nextCursor;\n        }\n\n        const isPlaying = this.cursor > 0 && this.cursor < endCursor;\n        gateOutput.forEach((channel) => {\n          channel.fill(+isPlaying);\n        });\n\n        this.emitProgressEvent();\n      },\n      () => {\n        gateOutput.forEach((channel) => {\n          channel.fill(0);\n        });\n        this.cursor = start[0] * sampleRate;\n        this.emitProgressEvent();\n      },\n    );\n\n    currentTimeOutput.forEach((outputChannel, channelIndex) => {\n      for (\n        let sampleIndex = 0;\n        sampleIndex < outputChannel.length;\n        sampleIndex++\n      ) {\n        outputChannel[sampleIndex] = this.cursor / sampleRate;\n      }\n    });\n\n    return true;\n  }\n}\n\ntry {\n  //@ts-ignore\n  registerProcessor(\"audio-track-processor\", AudioTrackProcessor);\n} catch (e) {}\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","type PoolName = string | number;\n\ntype Broadcast = <T = unknown>(data: T, poolName?: PoolName) => void;\n\nexport enum Events {\n  ADD_LISTENER = \"ADD_LISTENER\",\n  REMOVE_LISTENER = \"REMOVE_LISTENER\",\n}\n\ninterface EventListener {}\n\ninterface AddListenerEvent {\n  name: \"ADD_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ninterface RemoveListenerEvent {\n  name: \"REMOVE_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ntype UseBroadcastEvent = AddListenerEvent | RemoveListenerEvent;\n\nconst DEFAULT_POOL_NAME = \"default\";\n\n/**\n * hook for usage inside a worklet\n * */\nexport const useBroadcast = (port: MessagePort): Broadcast => {\n  const listeners: Record<PoolName, Array<MessagePort>> = {\n    [DEFAULT_POOL_NAME]: [],\n  };\n  port.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<UseBroadcastEvent>) => {\n      if (data.name === \"ADD_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n      if (data.name === \"REMOVE_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n    },\n  );\n\n  return (data, index = DEFAULT_POOL_NAME) => {\n    return listeners[index]?.forEach((listener) => listener.postMessage(data));\n  };\n};\n\n/**\n * helpers for usage outside or audio worklet\n * */\nexport const addBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"ADD_LISTENER\",\n      port: listenerPort,\n      poolName,\n    },\n    [listenerPort],\n  );\n};\n\nexport const removeBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"REMOVE_LISTENER\",\n      // port: listenerPort,\n      poolName,\n    },\n    [],\n  );\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","defineInteropFlag","export","AudioTrackProcessor","_defineProperty","_useBroadcast","AudioWorkletProcessor","parameterDescriptors","automationRate","defaultValue","minValue","maxValue","emitProgressEvent","cursor","prevCursor","broadcast","seconds","sampleRate","progress","data","useTrigger","channel","onTriggerCallback","value","isTriggered","useGate","onPlayCallback","onStopCallback","isPlaying","process","inputs","outputs","parameters","gate","loop","start","end","restart","detune","playbackRate","output","gateOutput","durationOutput","currentTimeOutput","prevStart","prevEnd","duration","forEach","index","detuneValue","finalPlaybackRate","basePlaybackRate","Math","pow","bufferLength","sourceChannel","channelData","position","startSampleIndex","floor","endSampleIndex","startSampleValue","endSampleValue","fractionalPart","endCursor","nextCursor","fill","outputChannel","channelIndex","sampleIndex","_","useBroadcast","port","onmessage","Float32Array","newChannel","combined","set","registerProcessor","e","_define_property","obj","key","enumerable","configurable","writable","interopDefault","a","__esModule","default","exportAll","source","dest","keys","prototype","hasOwnProperty","destName","Events","addBroadcastListener","removeBroadcastListener","DEFAULT_POOL_NAME","listeners","addEventListener","_data_poolName","_data_poolName1","poolName","push","_listeners_index","listener","postMessage","broadcastPort","listenerPort"],"version":3,"file":"worklet.34ff0a41.js.map"}
{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCIA,EAAA,MAAA,CAAA,EAAA,yBAAA,IAAa,GAJb,IAAA,EAAA,EAAA,cAIM,OAAO,UAA+B,sBAC1C,kBAA4B,CAAE,AAC9B,CAAA,SAAiC,EAAE,AAAC,AACpC,CAAA,KAA8B,IAAK,AACnC,CAAA,QAAkB,CAAE,AACpB,CAAA,WAAsB,CAAA,CAAM,AAC5B,CAAA,qBAAgC,CAAA,CAAM,AAEtC,CAAA,eAAiB,CAAE,AAEnB,YAAW,sBAAX,CACE,MAAO,CACL,CACE,KAAM,OACN,aAAc,EAAA,qBAAA,CACd,SAAU,AAAA,EAAA,cAAc,CAAC,OAAO,CAChC,SAAU,AAAA,EAAA,cAAc,CAAC,MAAM,CAC/B,eAAgB,QACjB,EACF,AACH,CAEA,aAAA,CACE,KAAK,GAEL,IAAI,CAA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","sources":["<anon>","packages/base-nodes/src/audioNodes/stepSequencer/worklet.ts","packages/base-nodes/src/audioNodes/stepSequencer/constants.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0/node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"cSCEy\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"StepSequencerProcessor\", ()=>StepSequencerProcessor);\nvar _constants = require(\"./constants\");\nconst TRIGGER_THRESHOLD = 0.5;\nclass StepSequencerProcessor extends AudioWorkletProcessor {\n    currentMidiNumber = 0;\n    sequence = [];\n    mode = null;\n    counter = 0;\n    isGateOpen = false;\n    shouldExecuteTrigger = false;\n    lastInputValue = 0;\n    static get parameterDescriptors() {\n        return [\n            {\n                name: \"mode\",\n                defaultValue: (0, _constants.DEFAULT_SEQUENCE_MODE),\n                minValue: (0, _constants.SEQUENCE_MODES).forward,\n                maxValue: (0, _constants.SEQUENCE_MODES).random,\n                automationRate: \"a-rate\"\n            }\n        ];\n    }\n    constructor(){\n        super();\n        this.port.onmessage = ({ data })=>{\n            if (data.name === \"sequence\") this.sequence = data.value;\n            if (data.name === \"resetCounter\") {\n                this.counter = 0;\n                this.port.postMessage({\n                    name: \"tick\",\n                    sequenceIndex: this.counter\n                });\n            }\n        };\n    }\n    onTick() {\n        const stepsCount = this.sequence.length;\n        if (!stepsCount) return;\n        if (this.mode === (0, _constants.SEQUENCE_MODES).forward) this.counter++;\n        if (this.mode === (0, _constants.SEQUENCE_MODES).random) this.counter = Math.round(Math.random() * stepsCount);\n        if (this.mode === (0, _constants.SEQUENCE_MODES).reverse) {\n            if (this.counter <= 0) this.counter = stepsCount;\n            this.counter--;\n        }\n        const sequenceIndex = Math.abs(this.counter) % stepsCount;\n        const midi = this.sequence[sequenceIndex];\n        if (midi !== null) {\n            this.currentMidiNumber = midi;\n            this.isGateOpen = true;\n            this.shouldExecuteTrigger = true;\n        } else this.isGateOpen = false;\n        this.port.postMessage({\n            name: \"tick\",\n            sequenceIndex: sequenceIndex\n        });\n    }\n    checkTrigger(value) {\n        if (value > TRIGGER_THRESHOLD && this.lastInputValue < TRIGGER_THRESHOLD) this.onTick();\n        this.lastInputValue = value;\n    }\n    checkChannel(channel) {\n        channel.forEach((item)=>this.checkTrigger(item));\n    }\n    process(inputs, outputs, parameters) {\n        this.mode = parameters.mode[0];\n        const input = inputs[0];\n        input.forEach((channel)=>this.checkChannel(channel));\n        const [midiOutput, gateOutput, triggerOutput] = outputs;\n        midiOutput.forEach((channel)=>{\n            for(let i = 0; i < channel.length; i++)channel[i] = this.currentMidiNumber;\n        });\n        gateOutput.forEach((channel)=>{\n            for(let i = 0; i < channel.length; i++)channel[i] = +this.isGateOpen;\n        });\n        triggerOutput.forEach((channel)=>{\n            for(let i = 0; i < channel.length; i++)channel[i] = 0;\n        });\n        if (this.shouldExecuteTrigger) {\n            triggerOutput[0][0] = 1;\n            this.shouldExecuteTrigger = false;\n        }\n        return true;\n    }\n}\ntry {\n    //@ts-ignore\n    registerProcessor(\"step-sequencer-processor\", StepSequencerProcessor);\n} catch (e) {}\n\n},{\"./constants\":\"2wghM\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5zHCx\"}],\"2wghM\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SEQUENCE_MODES\", ()=>SEQUENCE_MODES);\nparcelHelpers.export(exports, \"DEFAULT_SEQUENCE_MODE\", ()=>DEFAULT_SEQUENCE_MODE);\nparcelHelpers.export(exports, \"DEFAULT_STEP_VALUE\", ()=>DEFAULT_STEP_VALUE);\nvar SEQUENCE_MODES;\n(function(SEQUENCE_MODES) {\n    SEQUENCE_MODES[SEQUENCE_MODES[\"forward\"] = 0] = \"forward\";\n    SEQUENCE_MODES[SEQUENCE_MODES[\"reverse\"] = 1] = \"reverse\";\n    SEQUENCE_MODES[SEQUENCE_MODES[\"random\"] = 2] = \"random\";\n})(SEQUENCE_MODES || (SEQUENCE_MODES = {}));\nconst DEFAULT_SEQUENCE_MODE = SEQUENCE_MODES.forward;\nconst DEFAULT_STEP_VALUE = 36;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"5zHCx\"}],\"5zHCx\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"cSCEy\"], \"cSCEy\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=worklet.a1328032.js.map\n","import { SEQUENCE_MODES, DEFAULT_SEQUENCE_MODE } from \"./constants\";\n\nconst TRIGGER_THRESHOLD = 0.5;\n\nexport class StepSequencerProcessor extends AudioWorkletProcessor {\n  currentMidiNumber: number = 0;\n  sequence: Array<number | null> = [];\n  mode: SEQUENCE_MODES | null = null;\n  counter: number = 0;\n  isGateOpen: boolean = false;\n  shouldExecuteTrigger: boolean = false;\n\n  lastInputValue = 0;\n\n  static get parameterDescriptors() {\n    return [\n      {\n        name: \"mode\",\n        defaultValue: DEFAULT_SEQUENCE_MODE,\n        minValue: SEQUENCE_MODES.forward,\n        maxValue: SEQUENCE_MODES.random,\n        automationRate: \"a-rate\",\n      },\n    ];\n  }\n\n  constructor() {\n    super();\n\n    this.port.onmessage = ({ data }) => {\n      if (data.name === \"sequence\") {\n        this.sequence = data.value;\n      }\n      if (data.name === \"resetCounter\") {\n        this.counter = 0;\n\n        this.port.postMessage({\n          name: \"tick\",\n          sequenceIndex: this.counter,\n        });\n      }\n    };\n  }\n\n  onTick() {\n    const stepsCount = this.sequence.length;\n\n    if (!stepsCount) {\n      return;\n    }\n\n    if (this.mode === SEQUENCE_MODES.forward) {\n      this.counter++;\n    }\n    if (this.mode === SEQUENCE_MODES.random) {\n      this.counter = Math.round(Math.random() * stepsCount);\n    }\n    if (this.mode === SEQUENCE_MODES.reverse) {\n      if (this.counter <= 0) {\n        this.counter = stepsCount;\n      }\n      this.counter--;\n    }\n\n    const sequenceIndex = Math.abs(this.counter) % stepsCount;\n    const midi = this.sequence[sequenceIndex];\n    if (midi !== null) {\n      this.currentMidiNumber = midi;\n      this.isGateOpen = true;\n      this.shouldExecuteTrigger = true;\n    } else {\n      this.isGateOpen = false;\n    }\n\n    this.port.postMessage({\n      name: \"tick\",\n      sequenceIndex: sequenceIndex,\n    });\n  }\n\n  checkTrigger(value: number) {\n    if (value > TRIGGER_THRESHOLD && this.lastInputValue < TRIGGER_THRESHOLD) {\n      this.onTick();\n    }\n    this.lastInputValue = value;\n  }\n\n  checkChannel(channel: Float32Array) {\n    channel.forEach((item) => this.checkTrigger(item));\n  }\n\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: Record<string, Array<any>>,\n  ) {\n    this.mode = parameters.mode[0];\n\n    const input = inputs[0];\n    input.forEach((channel) => this.checkChannel(channel));\n\n    const [midiOutput, gateOutput, triggerOutput] = outputs;\n\n    midiOutput.forEach((channel: any) => {\n      for (let i = 0; i < channel.length; i++) {\n        channel[i] = this.currentMidiNumber;\n      }\n    });\n\n    gateOutput.forEach((channel: any) => {\n      for (let i = 0; i < channel.length; i++) {\n        channel[i] = +this.isGateOpen;\n      }\n    });\n\n    triggerOutput.forEach((channel: any) => {\n      for (let i = 0; i < channel.length; i++) {\n        channel[i] = 0;\n      }\n    });\n    if (this.shouldExecuteTrigger) {\n      triggerOutput[0][0] = 1;\n      this.shouldExecuteTrigger = false;\n    }\n\n    return true;\n  }\n}\n\ntry {\n  //@ts-ignore\n  registerProcessor(\"step-sequencer-processor\", StepSequencerProcessor);\n} catch (e) {}\n","export enum SEQUENCE_MODES {\n  forward,\n  reverse,\n  random,\n}\n\nexport const DEFAULT_SEQUENCE_MODE: SEQUENCE_MODES = SEQUENCE_MODES.forward;\nexport const DEFAULT_STEP_VALUE: number = 36;\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","StepSequencerProcessor","_constants","AudioWorkletProcessor","currentMidiNumber","sequence","mode","counter","isGateOpen","shouldExecuteTrigger","lastInputValue","parameterDescriptors","defaultValue","DEFAULT_SEQUENCE_MODE","minValue","SEQUENCE_MODES","forward","maxValue","random","automationRate","constructor","port","onmessage","data","value","postMessage","sequenceIndex","onTick","stepsCount","Math","round","reverse","abs","midi","checkTrigger","checkChannel","channel","forEach","item","process","inputs","outputs","parameters","input","midiOutput","gateOutput","triggerOutput","registerProcessor","e","DEFAULT_STEP_VALUE","interopDefault","a","__esModule","default","exportAll","source","dest","keys","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"worklet.a1328032.js.map"}
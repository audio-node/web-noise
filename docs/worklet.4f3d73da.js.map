{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCaA,EAAA,MAAA,CAAA,EAAA,qBAAA,IAAa,G,I,E,E,mCAbb,EAAA,EAAA,0BACA,EAAA,EAAA,qBACA,EAAA,EAAA,wB,E,E,c,C,GACA,EAAA,EAAA,UAUM,OAAO,UAA2B,sBAQtC,WAAW,sBAAX,CACE,MAAO,CACL,CACE,KAAM,AAAA,EAAA,0BAA0B,CAAC,IAAI,CACrC,aAAc,EACd,SAAU,EACV,SAAU,EACV,eAAgB,QACjB,EACD,CACE,KAAM,AAAA,EAAA,0BAA0B,CAAC,KAAK,CACtC,aAAc,EACd,SAAU,EACV,SAAU,EACV,eAAgB,QA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","sources":["<anon>","packages/base-nodes/src/webNoise/Sequencer/worklet.ts","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","packages/base-nodes/src/lib/useBroadcast.ts","packages/base-nodes/src/lib/useGate.ts","packages/base-nodes/src/lib/useTrigger.ts","packages/base-nodes/src/webNoise/Sequencer/types.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (\n  modules,\n  entry,\n  mainEntry,\n  parcelRequireName,\n  externals,\n  distDir,\n  publicUrl,\n  devServer\n) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var importMap = previousRequire.i || {};\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        if (externals[name]) {\n          return externals[name];\n        }\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.require = nodeRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.distDir = distDir;\n  newRequire.publicUrl = publicUrl;\n  newRequire.devServer = devServer;\n  newRequire.i = importMap;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  // Only insert newRequire.load when it is actually used.\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\n  // INSERT_LOAD_HERE\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n    }\n  }\n})({\"gXVOq\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SequencerProcessor\", ()=>SequencerProcessor);\nvar _defineProperty = require(\"@swc/helpers/_/_define_property\");\nvar _useBroadcast = require(\"../../lib/useBroadcast\");\nvar _useGate = require(\"../../lib/useGate\");\nvar _useTrigger = require(\"../../lib/useTrigger\");\nvar _useTriggerDefault = parcelHelpers.interopDefault(_useTrigger);\nvar _types = require(\"./types\");\nclass SequencerProcessor extends AudioWorkletProcessor {\n    static get parameterDescriptors() {\n        return [\n            {\n                name: (0, _types.SequencerWorkletParameters).gate,\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1,\n                automationRate: \"k-rate\"\n            },\n            {\n                name: (0, _types.SequencerWorkletParameters).reset,\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1,\n                automationRate: \"k-rate\"\n            }\n        ];\n    }\n    shiftIndex() {\n        this.index = Math.abs(++this.index) % this.sequence.length || 0;\n    }\n    resetIndex() {\n        this.index = -1;\n    }\n    process(_inputs, outputs, parameters) {\n        const gate = parameters[(0, _types.SequencerWorkletParameters).gate];\n        const reset = parameters[(0, _types.SequencerWorkletParameters).reset];\n        const [gateOutput, noteOutput, index] = outputs;\n        this.useGate({\n            channel: gate,\n            onBeforeOpen: ()=>{\n                this.shiftIndex();\n                this.broadcast({\n                    name: \"STEP_START\",\n                    data: this.index\n                });\n            },\n            onOpen: ()=>{},\n            onClosed: ()=>{},\n            onAfterClosed: ()=>{\n                this.broadcast({\n                    name: \"STEP_END\",\n                    data: this.index\n                });\n            }\n        });\n        this.useTrigger({\n            channel: reset,\n            onTriggered: ()=>{\n                this.resetIndex();\n            }\n        });\n        gateOutput.forEach((outputChannel, channelIndex)=>{\n            for(let sampleIndex = 0; sampleIndex < outputChannel.length; sampleIndex++){\n                const [state, note] = this.sequence[this.index] || [\n                    0,\n                    0\n                ];\n                outputChannel[sampleIndex] = state ? gate[0] : state;\n                noteOutput[channelIndex][sampleIndex] = note;\n            }\n        });\n        index.forEach((outputChannel, channelIndex)=>{\n            for(let sampleIndex = 0; sampleIndex < outputChannel.length; sampleIndex++)outputChannel[sampleIndex] = this.index;\n        });\n        return true;\n    }\n    constructor(){\n        super(), (0, _defineProperty._)(this, \"broadcast\", (0, _useBroadcast.useBroadcast)(this.port)), (0, _defineProperty._)(this, \"useGate\", (0, _useGate.createUseGate)({\n            threshold: 0.5\n        })), (0, _defineProperty._)(this, \"useTrigger\", (0, _useTriggerDefault.default)({\n            threshold: 0.5\n        })), (0, _defineProperty._)(this, \"sequence\", []), (0, _defineProperty._)(this, \"index\", -1);\n        this.port.start();\n        this.port.addEventListener(\"message\", ({ data })=>{\n            if (data.name === \"SET_SEQUENCE\") this.sequence = data.data;\n        });\n    }\n}\ntry {\n    //@ts-ignore\n    registerProcessor(\"sequencer-processor\", SequencerProcessor);\n} catch (e) {}\n\n},{\"@swc/helpers/_/_define_property\":\"dIIHJ\",\"../../lib/useBroadcast\":\"eLhYv\",\"../../lib/useGate\":\"8MIjB\",\"../../lib/useTrigger\":\"6UbBG\",\"./types\":\"8YeIc\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"dIIHJ\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"_\", ()=>_define_property);\nfunction _define_property(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"c8FVb\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"eLhYv\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Events\", ()=>Events);\nparcelHelpers.export(exports, \"useBroadcast\", ()=>useBroadcast);\nparcelHelpers.export(exports, \"addBroadcastListener\", ()=>addBroadcastListener);\nparcelHelpers.export(exports, \"removeBroadcastListener\", ()=>removeBroadcastListener);\nvar Events;\n(function(Events) {\n    Events[\"ADD_LISTENER\"] = \"ADD_LISTENER\";\n    Events[\"REMOVE_LISTENER\"] = \"REMOVE_LISTENER\";\n})(Events || (Events = {}));\nconst DEFAULT_POOL_NAME = \"default\";\nconst useBroadcast = (port)=>{\n    const listeners = {\n        [DEFAULT_POOL_NAME]: []\n    };\n    port.addEventListener(\"message\", ({ data })=>{\n        if (data.name === \"ADD_LISTENER\") {\n            var _data_poolName;\n            const poolName = (_data_poolName = data.poolName) !== null && _data_poolName !== void 0 ? _data_poolName : DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n        if (data.name === \"REMOVE_LISTENER\") {\n            var _data_poolName1;\n            const poolName = (_data_poolName1 = data.poolName) !== null && _data_poolName1 !== void 0 ? _data_poolName1 : DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n    });\n    return (data, index = DEFAULT_POOL_NAME)=>{\n        var _listeners_index;\n        return (_listeners_index = listeners[index]) === null || _listeners_index === void 0 ? void 0 : _listeners_index.forEach((listener)=>listener.postMessage(data));\n    };\n};\nconst addBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"ADD_LISTENER\",\n        port: listenerPort,\n        poolName\n    }, [\n        listenerPort\n    ]);\n};\nconst removeBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"REMOVE_LISTENER\",\n        // port: listenerPort,\n        poolName\n    }, []);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"8MIjB\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"createUseGate\", ()=>createUseGate);\nconst createUseGate = ({ threshold = 0.5 })=>{\n    let isGateOpen = false;\n    return ({ channel, onBeforeOpen, onOpen, onAfterClosed, onClosed })=>{\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= threshold && !isGateOpen) {\n                onBeforeOpen === null || onBeforeOpen === void 0 ? void 0 : onBeforeOpen();\n                isGateOpen = true;\n            }\n            if (value < threshold && isGateOpen) {\n                onAfterClosed === null || onAfterClosed === void 0 ? void 0 : onAfterClosed();\n                isGateOpen = false;\n            }\n        }\n        if (isGateOpen) onOpen === null || onOpen === void 0 ? void 0 : onOpen();\n        else onClosed === null || onClosed === void 0 ? void 0 : onClosed();\n    };\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"6UbBG\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nconst createUseTrigger = ({ threshold = 0.5 })=>{\n    let isTriggered = false;\n    return ({ channel, onTriggered, onUntriggered })=>{\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= threshold && !isTriggered) {\n                isTriggered = true;\n                onTriggered === null || onTriggered === void 0 ? void 0 : onTriggered();\n            }\n            if (value < threshold && isTriggered) {\n                isTriggered = false;\n                onUntriggered === null || onUntriggered === void 0 ? void 0 : onUntriggered();\n            }\n        }\n    };\n};\nexports.default = createUseTrigger;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}],\"8YeIc\":[function(require,module,exports,__globalThis) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"SequencerWorkletParameters\", ()=>SequencerWorkletParameters);\nvar SequencerWorkletParameters;\n(function(SequencerWorkletParameters) {\n    SequencerWorkletParameters[\"gate\"] = \"gate\";\n    SequencerWorkletParameters[\"reset\"] = \"reset\";\n})(SequencerWorkletParameters || (SequencerWorkletParameters = {}));\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"c8FVb\"}]},[\"gXVOq\"], \"gXVOq\", \"parcelRequirec6d8\", {})\n\n//# sourceMappingURL=worklet.4f3d73da.js.map\n","import { useBroadcast } from \"../../lib/useBroadcast\";\nimport { createUseGate } from \"../../lib/useGate\";\nimport createUseTrigger from \"../../lib/useTrigger\";\nimport {\n  PortEvent,\n  Sequence,\n  SequencerWorkletParameters,\n  StepEndEvent,\n  StepStartEvent,\n} from \"./types\";\n\ntype Parameters = Record<SequencerWorkletParameters, Float32Array>;\n\nexport class SequencerProcessor extends AudioWorkletProcessor {\n  broadcast = useBroadcast(this.port);\n  useGate = createUseGate({ threshold: 0.5 });\n  useTrigger = createUseTrigger({ threshold: 0.5 });\n\n  sequence: Sequence = [];\n  index = -1;\n\n  static get parameterDescriptors() {\n    return [\n      {\n        name: SequencerWorkletParameters.gate,\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n        automationRate: \"k-rate\",\n      },\n      {\n        name: SequencerWorkletParameters.reset,\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n        automationRate: \"k-rate\",\n      },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.port.start();\n\n    this.port.addEventListener(\n      \"message\",\n      ({ data }: MessageEvent<PortEvent>) => {\n        if (data.name === \"SET_SEQUENCE\") {\n          this.sequence = data.data;\n        }\n      },\n    );\n  }\n\n  shiftIndex() {\n    this.index = Math.abs(++this.index) % this.sequence.length || 0;\n  }\n\n  resetIndex() {\n    this.index = -1;\n  }\n\n  process(\n    _inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: Parameters,\n  ) {\n    const gate = parameters[SequencerWorkletParameters.gate];\n    const reset = parameters[SequencerWorkletParameters.reset];\n\n    const [gateOutput, noteOutput, index] = outputs;\n\n    this.useGate({\n      channel: gate,\n      onBeforeOpen: () => {\n        this.shiftIndex();\n        this.broadcast<StepStartEvent>({\n          name: \"STEP_START\",\n          data: this.index,\n        });\n      },\n      onOpen: () => {},\n      onClosed: () => {},\n      onAfterClosed: () => {\n        this.broadcast<StepEndEvent>({\n          name: \"STEP_END\",\n          data: this.index,\n        });\n      },\n    });\n\n    this.useTrigger({\n      channel: reset,\n      onTriggered: () => {\n        this.resetIndex();\n      },\n    });\n\n    gateOutput.forEach((outputChannel, channelIndex) => {\n      for (\n        let sampleIndex = 0;\n        sampleIndex < outputChannel.length;\n        sampleIndex++\n      ) {\n        const [state, note] = this.sequence[this.index] || [0, 0];\n        outputChannel[sampleIndex] = state ? gate[0] : state;\n        noteOutput[channelIndex][sampleIndex] = note;\n      }\n    });\n\n    index.forEach((outputChannel, channelIndex) => {\n      for (\n        let sampleIndex = 0;\n        sampleIndex < outputChannel.length;\n        sampleIndex++\n      ) {\n        outputChannel[sampleIndex] = this.index;\n      }\n    });\n\n    return true;\n  }\n}\n\ntry {\n  //@ts-ignore\n  registerProcessor(\"sequencer-processor\", SequencerProcessor);\n} catch (e) {}\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","type PoolName = string | number;\n\ntype Broadcast = <T = unknown>(data: T, poolName?: PoolName) => void;\n\nexport enum Events {\n  ADD_LISTENER = \"ADD_LISTENER\",\n  REMOVE_LISTENER = \"REMOVE_LISTENER\",\n}\n\ninterface EventListener {}\n\ninterface AddListenerEvent {\n  name: \"ADD_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ninterface RemoveListenerEvent {\n  name: \"REMOVE_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ntype UseBroadcastEvent = AddListenerEvent | RemoveListenerEvent;\n\nconst DEFAULT_POOL_NAME = \"default\";\n\n/**\n * hook for usage inside a worklet\n * */\nexport const useBroadcast = (port: MessagePort): Broadcast => {\n  const listeners: Record<PoolName, Array<MessagePort>> = {\n    [DEFAULT_POOL_NAME]: [],\n  };\n  port.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<UseBroadcastEvent>) => {\n      if (data.name === \"ADD_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n      if (data.name === \"REMOVE_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n    },\n  );\n\n  return (data, index = DEFAULT_POOL_NAME) => {\n    return listeners[index]?.forEach((listener) => listener.postMessage(data));\n  };\n};\n\n/**\n * helpers for usage outside or audio worklet\n * */\nexport const addBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"ADD_LISTENER\",\n      port: listenerPort,\n      poolName,\n    },\n    [listenerPort],\n  );\n};\n\nexport const removeBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"REMOVE_LISTENER\",\n      // port: listenerPort,\n      poolName,\n    },\n    [],\n  );\n};\n","export const createUseGate = ({ threshold = 0.5 }) => {\n  let isGateOpen = false;\n  return ({\n    channel,\n    onBeforeOpen,\n    onOpen,\n    onAfterClosed,\n    onClosed,\n  }: {\n    channel: Float32Array;\n    onOpen?: () => void;\n    onClosed?: () => void;\n    onBeforeOpen?: () => void;\n    onAfterClosed?: () => void;\n  }) => {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= threshold && !isGateOpen) {\n        onBeforeOpen?.();\n        isGateOpen = true;\n      }\n      if (value < threshold && isGateOpen) {\n        onAfterClosed?.();\n        isGateOpen = false;\n      }\n    }\n    if (isGateOpen) {\n      onOpen?.();\n    } else {\n      onClosed?.();\n    }\n  };\n};\n","const createUseTrigger = ({ threshold = 0.5 }) => {\n  let isTriggered = false;\n  return ({\n    channel,\n    onTriggered,\n    onUntriggered,\n  }: {\n    channel: Float32Array;\n    onTriggered?: () => void;\n    onUntriggered?: () => void;\n  }) => {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= threshold && !isTriggered) {\n        isTriggered = true;\n        onTriggered?.();\n      }\n      if (value < threshold && isTriggered) {\n        isTriggered = false;\n        onUntriggered?.();\n      }\n    }\n  };\n};\n\nexport default createUseTrigger;\n","import { WNNodeProps, WNNodeData, WNAudioNode } from \"@web-noise/core\";\n\nexport enum SequencerWorkletParameters {\n  gate = \"gate\",\n  reset = \"reset\",\n}\n\nexport type Sequence = [number, number][];\n\nexport interface SequencerValues {\n  sequence?: Sequence;\n}\n\nexport interface SequencerConfig {\n  color?: string;\n}\n\nexport type SequencerData = WNNodeData<SequencerValues, SequencerConfig>;\n\nexport interface SequencerProps extends WNNodeProps<SequencerData> {}\n\nexport interface Sequencer extends WNAudioNode {\n  setValues: (values?: SequencerValues) => void;\n\n  registerPort: (port: MessagePort) => MessagePort;\n}\n\nexport interface StepStartEvent {\n  name: \"STEP_START\";\n  data: number;\n}\n\nexport interface StepEndEvent {\n  name: \"STEP_END\";\n  data: number;\n}\n\nexport interface SetSequenceEvent {\n  name: \"SET_SEQUENCE\";\n  data: Sequence;\n}\n\nexport type PortEvent = StepStartEvent | StepEndEvent | SetSequenceEvent;\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","defineInteropFlag","export","SequencerProcessor","_defineProperty","_useBroadcast","_useGate","_useTrigger","_useTriggerDefault","interopDefault","_types","AudioWorkletProcessor","parameterDescriptors","SequencerWorkletParameters","gate","defaultValue","minValue","maxValue","automationRate","reset","shiftIndex","index","Math","abs","sequence","resetIndex","process","_inputs","outputs","parameters","gateOutput","noteOutput","useGate","channel","onBeforeOpen","broadcast","data","onOpen","onClosed","onAfterClosed","useTrigger","onTriggered","forEach","outputChannel","channelIndex","sampleIndex","state","note","_","useBroadcast","port","createUseGate","threshold","default","start","addEventListener","registerProcessor","e","_define_property","obj","key","value","enumerable","configurable","writable","a","__esModule","exportAll","source","dest","keys","prototype","hasOwnProperty","destName","Events","addBroadcastListener","removeBroadcastListener","DEFAULT_POOL_NAME","listeners","_data_poolName","_data_poolName1","poolName","push","_listeners_index","listener","postMessage","broadcastPort","listenerPort","isGateOpen","isTriggered","onUntriggered"],"version":3,"file":"worklet.4f3d73da.js.map"}
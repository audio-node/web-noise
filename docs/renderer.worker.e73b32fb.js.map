{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,MCoCI,EAEA,EArCJ,IAAM,EAAQ,CACZ,EACA,EACA,EACA,EACA,IAIe,AADK,CAAA,AADC,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,EAAO,GAAQ,GACnB,CAAA,EAAU,CAAA,EAAQ,CAAA,EACxB,CAAA,EAAS,CAAA,EAAU,EA2B9C,EAAQ,MAGN,EAAS,KACb,GAAI,CAAC,GAAiB,CAAC,EAAW,CAChC,sBAAsB,GACtB,MACD,CAED,IAAM,EAAS,EAAc,MAAM,CAC7B,CAAE,MAAA,CAAK,CAAE,OAAA,CAAM,CAAE,CAAG,EAEpB,CAAE,QAAA,CAAO,CAAE,YAAA,CAAW,CAAE,WAAA,CAAU,CAAE,CAAG,EAEvC,EAAe,EAAW,MAAM,CAEtC,EAAc,SAAS,CAAC,EAAG,EAAG,EAAO,GAErC,IAAM,EAAW,EAAQ,KAAK,CAAG,EAAgB,IAE7C,EAAI,EACR,IAAK,IAAI,EAAI,EAAG,EAAI,EAAc,IAAK,CACrC,IAAM,EAAY,EAAM,CAAU,CAAC,EAAE,CAAE,EAAG,IAAK,EAAG,AAAS,EAAT,EAClD,CAAA,EAAc,SAAS,CAAG,EAC1B,EAAc,QAAQ,CACpB,EACA,EAAO,MAAM,CAAG,EAAY,EAC5B,EACA,GAEF,GAAK,EAAW,CACjB,CAED,sBAAsB,EACxB,EAGA,UAAY,SAAU,CAAE,KAAA,CAAI,CAAe,EACvB,SAAd,EAAK,IAAI,GAEX,EAAgB,AADP,EAAK,MAAM,CACG,UAAU,CAAC,MAClC,EAAK,IAAI,CAAC,SAAS,CAAG,CAAC,CAAE,KAAA,CAAI,CAAuB,IAClD,EAAY,CACV,GAAG,CAAI,AACR,CACH,EACA,sBAAsB,IAEN,cAAd,EAAK,IAAI,EACX,CAAA,EAAQ,EAAK,KAAK,AAAL,CAEjB,C,E,C,E,E,C,Q,C,Q","sources":["<anon>","packages/base-nodes/src/Spectroscope/renderer.worker.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"4voiZ\":[function(require,module,exports) {\n\"use strict\";\n// helpers\nconst scale = (input, inMin, inMax, outMin, outMax)=>{\n    const clampedInput = Math.max(Math.min(input, inMax), inMin);\n    const normalized = (clampedInput - inMin) / (inMax - inMin);\n    const output = normalized * (outMax - outMin) + outMin;\n    return output;\n};\n//scope variables\nlet canvas;\nlet canvasContext;\nlet color = \"red\";\nlet audioData;\nconst render = ()=>{\n    if (!canvasContext || !audioData) {\n        requestAnimationFrame(render);\n        return;\n    }\n    const canvas = canvasContext.canvas;\n    const { width, height } = canvas;\n    const { phasors, frequencies, magnitudes } = audioData;\n    const bufferLength = magnitudes.length;\n    canvasContext.clearRect(0, 0, width, height);\n    const barWidth = canvas.width / bufferLength * 2.5;\n    let x = 0;\n    for(let i = 0; i < bufferLength; i++){\n        const barHeight = scale(magnitudes[i], 0, 255, 0, height * 2);\n        canvasContext.fillStyle = color;\n        canvasContext.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight);\n        x += barWidth + 1;\n    }\n    requestAnimationFrame(render);\n};\n//event handling\nonmessage = function({ data }) {\n    if (data.name === \"INIT\") {\n        canvas = data.canvas;\n        canvasContext = canvas.getContext(\"2d\");\n        data.port.onmessage = ({ data })=>{\n            audioData = {\n                ...data\n            };\n        };\n        requestAnimationFrame(render);\n    }\n    if (data.name === \"SET_COLOR\") color = data.color;\n};\n\n},{}]},[\"4voiZ\"], \"4voiZ\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=renderer.worker.e73b32fb.js.map\n","// helpers\nconst scale = (\n  input: number,\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number\n): number => {\n  const clampedInput = Math.max(Math.min(input, inMax), inMin);\n  const normalized = (clampedInput - inMin) / (inMax - inMin);\n  const output = normalized * (outMax - outMin) + outMin;\n\n  return output;\n};\n//types\ninterface InitEvent {\n  name: \"INIT\";\n  canvas: HTMLCanvasElement;\n  port: MessagePort;\n}\n\ninterface SetColorEvent {\n  name: \"SET_COLOR\";\n  color: string;\n}\n\ntype WorkerEvent = MessageEvent<InitEvent | SetColorEvent>;\n\ninterface AudioData {\n  phasors: Array<[number, number]>;\n  magnitudes: Uint8Array;\n  frequencies: Uint8Array;\n}\n\n//scope variables\nlet canvas: any;\nlet canvasContext: CanvasRenderingContext2D;\nlet color = \"red\";\nlet audioData: AudioData;\n\nconst render = () => {\n  if (!canvasContext || !audioData) {\n    requestAnimationFrame(render);\n    return;\n  }\n\n  const canvas = canvasContext.canvas;\n  const { width, height } = canvas;\n\n  const { phasors, frequencies, magnitudes } = audioData;\n\n  const bufferLength = magnitudes.length;\n\n  canvasContext.clearRect(0, 0, width, height);\n\n  const barWidth = (canvas.width / bufferLength) * 2.5;\n\n  let x = 0;\n  for (let i = 0; i < bufferLength; i++) {\n    const barHeight = scale(magnitudes[i], 0, 255, 0, height * 2);\n    canvasContext.fillStyle = color;\n    canvasContext.fillRect(\n      x,\n      canvas.height - barHeight / 2,\n      barWidth,\n      barHeight\n    );\n    x += barWidth + 1;\n  }\n\n  requestAnimationFrame(render);\n};\n\n//event handling\nonmessage = function ({ data }: WorkerEvent) {\n  if (data.name === \"INIT\") {\n    canvas = data.canvas;\n    canvasContext = canvas.getContext(\"2d\");\n    data.port.onmessage = ({ data }: { data: AudioData }) => {\n      audioData = {\n        ...data,\n      };\n    };\n    requestAnimationFrame(render);\n  }\n  if (data.name === \"SET_COLOR\") {\n    color = data.color;\n  }\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","canvasContext","audioData","scale","input","inMin","inMax","outMin","outMax","normalized","clampedInput","Math","max","min","color","render","requestAnimationFrame","canvas","width","height","phasors","frequencies","magnitudes","bufferLength","clearRect","barWidth","barHeight","fillStyle","fillRect","onmessage","data","getContext","port"],"version":3,"file":"renderer.worker.e73b32fb.js.map"}
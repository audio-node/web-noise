{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCGA,EAAA,MAAA,CAAA,EAAA,sBAAA,IAAa,GAHb,IAAA,EAAA,EAAA,uBACA,EAAA,EAAA,mBAEM,OAAO,UAA4B,sBACvC,UAAY,AAAA,CAAA,EAAA,EAAA,YAAA,AAAA,EAAa,IAAI,CAAC,IAAI,CAAE,AACpC,CAAA,cAA+B,IAAK,AACpC,CAAA,aAA8B,IAAK,AAEnC,YAAW,sBAAX,CACE,MAAO,CACL,CACE,KAAM,OACN,SAAU,EACV,SAAU,AAAA,EAAA,UAAU,CAAC,MAAM,CAAG,CAC/B,EACF,AACH,CAEA,aAAA,CACE,KAAK,GACL,IAAI,CAAC,IAAI,CAAC,KAAK,EACjB,CAEA,UAAA,CACE,IAAM,EAAW,AAAA,EAAA,UAAU,AAAA,CAAC,IAAI,CAAC,YAAY,EAAI,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","sources":["<anon>","packages/base-nodes/src/Distortion/worklet.ts","packages/base-nodes/src/lib/useBroadcast.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0_@swc+helpers@0.5.13_/node_modules/@parcel/transformer-js/src/esmodule-helpers.js","packages/base-nodes/src/Distortion/waveGenerators.ts","packages/base-nodes/src/lib/generateWave.ts","node_modules/.pnpm/splines@https+++codeload.github.com+jonathanlurie+splines+tar.gz+571665cfe15f5aa9aad338cb6f933c773e251073/node_modules/splines/index.js","packages/base-nodes/src/lib/scale.ts"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"3qWXy\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DistortionProcessor\", ()=>DistortionProcessor);\nvar _useBroadcast = require(\"../lib/useBroadcast\");\nvar _waveGenerators = require(\"./waveGenerators\");\nclass DistortionProcessor extends AudioWorkletProcessor {\n    broadcast = (0, _useBroadcast.useBroadcast)(this.port);\n    _currentDrive = null;\n    _currentType = null;\n    static get parameterDescriptors() {\n        return [\n            {\n                name: \"type\",\n                minValue: 0,\n                maxValue: (0, _waveGenerators.generators).length - 1\n            }\n        ];\n    }\n    constructor(){\n        super();\n        this.port.start();\n    }\n    onChange() {\n        const generate = (0, _waveGenerators.generators)[this._currentType ?? 0];\n        if (!generate) {\n            console.error(\"could not find generator with index \", this._currentType);\n            return;\n        }\n        const waveData = generate(this._currentDrive ?? 0);\n        this.broadcast(waveData);\n    }\n    process(inputs, _outputs, parameters) {\n        const inputChannel = inputs?.[0]?.[0];\n        if (!inputChannel?.length) {\n            this._currentDrive = 0;\n            this.onChange();\n            return true;\n        }\n        const generatorType = parameters.type[0];\n        if (generatorType !== this._currentType) {\n            this._currentType = generatorType;\n            this.onChange();\n        }\n        inputChannel.forEach((drive)=>{\n            if (drive !== this._currentDrive) {\n                this._currentDrive = drive;\n                this.onChange();\n            }\n        });\n        return true;\n    }\n}\n//@ts-ignore\nregisterProcessor(\"distortion-processor\", DistortionProcessor);\n\n},{\"../lib/useBroadcast\":\"eLhYv\",\"./waveGenerators\":\"aQfCi\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}],\"eLhYv\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"Events\", ()=>Events);\nparcelHelpers.export(exports, \"useBroadcast\", ()=>useBroadcast);\nparcelHelpers.export(exports, \"addBroadcastListener\", ()=>addBroadcastListener);\nparcelHelpers.export(exports, \"removeBroadcastListener\", ()=>removeBroadcastListener);\nvar Events;\n(function(Events) {\n    Events[\"ADD_LISTENER\"] = \"ADD_LISTENER\";\n    Events[\"REMOVE_LISTENER\"] = \"REMOVE_LISTENER\";\n})(Events || (Events = {}));\nconst DEFAULT_POOL_NAME = \"default\";\nconst useBroadcast = (port)=>{\n    const listeners = {\n        [DEFAULT_POOL_NAME]: []\n    };\n    port.addEventListener(\"message\", ({ data })=>{\n        if (data.name === \"ADD_LISTENER\") {\n            const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n        if (data.name === \"REMOVE_LISTENER\") {\n            const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n            if (!listeners[poolName]) listeners[poolName] = [];\n            listeners[poolName].push(data.port);\n        }\n    });\n    return (data, index = DEFAULT_POOL_NAME)=>{\n        return listeners[index]?.forEach((listener)=>listener.postMessage(data));\n    };\n};\nconst addBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"ADD_LISTENER\",\n        port: listenerPort,\n        poolName\n    }, [\n        listenerPort\n    ]);\n};\nconst removeBroadcastListener = (broadcastPort, listenerPort, poolName)=>{\n    broadcastPort.postMessage({\n        name: \"REMOVE_LISTENER\",\n        // port: listenerPort,\n        poolName\n    }, []);\n};\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}],\"4w0m1\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"aQfCi\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"generateClipperWave\", ()=>generateClipperWave);\nparcelHelpers.export(exports, \"generateAnalogWarmWave\", ()=>generateAnalogWarmWave);\nparcelHelpers.export(exports, \"generateFuzzWave\", ()=>generateFuzzWave);\nparcelHelpers.export(exports, \"generators\", ()=>generators);\nvar _generateWave = require(\"../lib/generateWave\");\nvar _scale = require(\"../lib/scale\");\nvar _scaleDefault = parcelHelpers.interopDefault(_scale);\nconst generateClipperWave = (drive = 0, bufferSize = 1024)=>{\n    const x1 = (0, _scaleDefault.default)(drive, 0, 1, 0, 0.46);\n    const x2 = (0, _scaleDefault.default)(drive, 0, 1, 1, 0.54);\n    const points = [\n        {\n            x: x1,\n            y: 0\n        },\n        {\n            x: x2,\n            y: 1\n        }\n    ];\n    return (0, _generateWave.generateWave)(points, \"monotonic\", bufferSize);\n};\nconst generateAnalogWarmWave = (drive = 0, bufferSize = 1024)=>{\n    const x1 = (0, _scaleDefault.default)(drive, 0, 1, 0.25, 0.35);\n    const x2 = (0, _scaleDefault.default)(drive, 0, 1, 0.75, 0.65);\n    const points = [\n        {\n            x: 0,\n            y: 0\n        },\n        {\n            x: x1,\n            y: 0.25\n        },\n        {\n            x: x2,\n            y: 0.75\n        },\n        {\n            x: 1,\n            y: 1\n        }\n    ];\n    return (0, _generateWave.generateWave)(points, \"monotonic\", bufferSize);\n};\nconst generateFuzzWave = (drive = 0, bufferSize = 1024)=>{\n    const x1 = (0, _scaleDefault.default)(drive, 0, 1, 0, 0.25);\n    const x2 = (0, _scaleDefault.default)(drive, 0, 1, 0.25, 0.32);\n    const x3 = (0, _scaleDefault.default)(drive, 0, 1, 1, 0.6);\n    const points = [\n        {\n            x: x1,\n            y: 0\n        },\n        {\n            x: x2,\n            y: 0.25\n        },\n        {\n            x: 0.5,\n            y: 0.5\n        },\n        {\n            x: x3,\n            y: 1\n        }\n    ];\n    return (0, _generateWave.generateWave)(points, \"monotonic\", bufferSize);\n};\nconst generators = [\n    generateClipperWave,\n    generateAnalogWarmWave,\n    generateFuzzWave\n];\n\n},{\"../lib/generateWave\":\"48KV7\",\"../lib/scale\":\"9v9Uw\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}],\"48KV7\":[function(require,module,exports) {\n//@ts-ignore\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"generateWave\", ()=>generateWave);\nvar _splines = require(\"splines\");\nconst generateWave = (points = [], type = \"monotonic\", samples = Math.pow(2, 16))=>{\n    if (!points.length) return null;\n    const [xSeries, ySeries] = points.reduce(([xAcc, yAcc], { x, y })=>[\n            [\n                ...xAcc,\n                x * samples\n            ],\n            [\n                ...yAcc,\n                y\n            ]\n        ], [\n        [],\n        []\n    ]);\n    const ySeriesInterpolated = new Float32Array(samples).fill(0);\n    const SplineInterpolator = type === \"monotonic\" ? (0, _splines.MonotonicCubicSpline) : (0, _splines.CubicSpline);\n    const splineInterpolator = new SplineInterpolator(xSeries, ySeries);\n    // before the first point (if not at the left of the canvas)\n    for(let x = 0; x < Math.ceil(xSeries[0]); x++){\n        const y = ySeries[0];\n        // copying the inteprolated values in a buffer\n        ySeriesInterpolated[x] = y;\n    }\n    // between the first and the last point\n    for(let x = Math.ceil(xSeries[0]); x < Math.ceil(xSeries[xSeries.length - 1]); x++){\n        const y = splineInterpolator.interpolate(x);\n        // copying the inteprolated values in a buffer\n        ySeriesInterpolated[x] = y;\n    }\n    // after the last point (if not at the right of the canvas)\n    for(var x = Math.ceil(xSeries[xSeries.length - 1]); x < samples; x++){\n        const y = ySeries[ySeries.length - 1];\n        // copying the inteprolated values in a buffer\n        ySeriesInterpolated[x] = y;\n    }\n    const audioData = new Float32Array(ySeriesInterpolated.map((value)=>{\n        const newValue = value * 2 - 1;\n        if (newValue > 1) return 1;\n        if (newValue < -1) return -1;\n        return newValue;\n    }));\n    return audioData;\n};\n\n},{\"splines\":\"e8CDA\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}],\"e8CDA\":[function(require,module,exports) {\n/**\n * by George MacKerron, mackerron.com\n *\n * Monotonic Cubic Spline:\n *\n *  adapted from:\n *     http://sourceforge.net/mailarchive/forum.php?thread_name=EC90C5C6-C982-4F49-8D46-A64F270C5247%40gmail.com&forum_name=matplotlib-users\n *     (easier to read at http://old.nabble.com/%22Piecewise-Cubic-Hermite-Interpolating-Polynomial%22-in-python-td25204843.html)\n *\n *  with help from:\n *      F N Fritsch & R E Carlson (1980) 'Monotone Piecewise Cubic Interpolation', SIAM Journal of Numerical Analysis 17(2), 238 - 246.\n *      http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n *      http://en.wikipedia.org/wiki/Cubic_Hermite_spline\n *\n *\n *  Natural and Clamped:\n *\n *  adapted from:\n *      http://www.michonline.com/ryan/csc/m510/splinepresent.html\n **/ var CubicSpline, MonotonicCubicSpline;\nMonotonicCubicSpline = function() {\n    function MonotonicCubicSpline(x, y) {\n        var alpha, beta, delta, dist, i, m, n, tau, to_fix, _i, _j, _len, _len2, _ref, _ref2, _ref3, _ref4;\n        n = x.length;\n        delta = [];\n        m = [];\n        alpha = [];\n        beta = [];\n        dist = [];\n        tau = [];\n        for(i = 0, _ref = n - 1; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i += 1 : i -= 1){\n            delta[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n            if (i > 0) m[i] = (delta[i - 1] + delta[i]) / 2;\n        }\n        m[0] = delta[0];\n        m[n - 1] = delta[n - 2];\n        to_fix = [];\n        for(i = 0, _ref2 = n - 1; 0 <= _ref2 ? i < _ref2 : i > _ref2; 0 <= _ref2 ? i += 1 : i -= 1)if (delta[i] === 0) to_fix.push(i);\n        for(_i = 0, _len = to_fix.length; _i < _len; _i++){\n            i = to_fix[_i];\n            m[i] = m[i + 1] = 0;\n        }\n        for(i = 0, _ref3 = n - 1; 0 <= _ref3 ? i < _ref3 : i > _ref3; 0 <= _ref3 ? i += 1 : i -= 1){\n            alpha[i] = m[i] / delta[i];\n            beta[i] = m[i + 1] / delta[i];\n            dist[i] = Math.pow(alpha[i], 2) + Math.pow(beta[i], 2);\n            tau[i] = 3 / Math.sqrt(dist[i]);\n        }\n        to_fix = [];\n        for(i = 0, _ref4 = n - 1; 0 <= _ref4 ? i < _ref4 : i > _ref4; 0 <= _ref4 ? i += 1 : i -= 1)if (dist[i] > 9) to_fix.push(i);\n        for(_j = 0, _len2 = to_fix.length; _j < _len2; _j++){\n            i = to_fix[_j];\n            m[i] = tau[i] * alpha[i] * delta[i];\n            m[i + 1] = tau[i] * beta[i] * delta[i];\n        }\n        this.x = x.slice(0, n);\n        this.y = y.slice(0, n);\n        this.m = m;\n    }\n    MonotonicCubicSpline.prototype.interpolate = function(x) {\n        var h, h00, h01, h10, h11, i, t, t2, t3, y, _ref;\n        for(i = _ref = this.x.length - 2; _ref <= 0 ? i <= 0 : i >= 0; _ref <= 0 ? i += 1 : i -= 1){\n            if (this.x[i] <= x) break;\n        }\n        h = this.x[i + 1] - this.x[i];\n        t = (x - this.x[i]) / h;\n        t2 = Math.pow(t, 2);\n        t3 = Math.pow(t, 3);\n        h00 = 2 * t3 - 3 * t2 + 1;\n        h10 = t3 - 2 * t2 + t;\n        h01 = -2 * t3 + 3 * t2;\n        h11 = t3 - t2;\n        y = h00 * this.y[i] + h10 * h * this.m[i] + h01 * this.y[i + 1] + h11 * h * this.m[i + 1];\n        return y;\n    };\n    return MonotonicCubicSpline;\n}();\nCubicSpline = function() {\n    function CubicSpline(x, a, d0, dn) {\n        var b, c, clamped, d, h, i, k, l, n, s, u, y, z, _ref;\n        if (!(x != null && a != null)) return;\n        clamped = d0 != null && dn != null;\n        n = x.length - 1;\n        h = [];\n        y = [];\n        l = [];\n        u = [];\n        z = [];\n        c = [];\n        b = [];\n        d = [];\n        k = [];\n        s = [];\n        for(i = 0; 0 <= n ? i < n : i > n; 0 <= n ? i += 1 : i -= 1){\n            h[i] = x[i + 1] - x[i];\n            k[i] = a[i + 1] - a[i];\n            s[i] = k[i] / h[i];\n        }\n        if (clamped) {\n            y[0] = 3 * (a[1] - a[0]) / h[0] - 3 * d0;\n            y[n] = 3 * dn - 3 * (a[n] - a[n - 1]) / h[n - 1];\n        }\n        for(i = 1; 1 <= n ? i < n : i > n; 1 <= n ? i += 1 : i -= 1)y[i] = 3 / h[i] * (a[i + 1] - a[i]) - 3 / h[i - 1] * (a[i] - a[i - 1]);\n        if (clamped) {\n            l[0] = 2 * h[0];\n            u[0] = 0.5;\n            z[0] = y[0] / l[0];\n        } else {\n            l[0] = 1;\n            u[0] = 0;\n            z[0] = 0;\n        }\n        for(i = 1; 1 <= n ? i < n : i > n; 1 <= n ? i += 1 : i -= 1){\n            l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * u[i - 1];\n            u[i] = h[i] / l[i];\n            z[i] = (y[i] - h[i - 1] * z[i - 1]) / l[i];\n        }\n        if (clamped) {\n            l[n] = h[n - 1] * (2 - u[n - 1]);\n            z[n] = (y[n] - h[n - 1] * z[n - 1]) / l[n];\n            c[n] = z[n];\n        } else {\n            l[n] = 1;\n            z[n] = 0;\n            c[n] = 0;\n        }\n        for(i = _ref = n - 1; _ref <= 0 ? i <= 0 : i >= 0; _ref <= 0 ? i += 1 : i -= 1){\n            c[i] = z[i] - u[i] * c[i + 1];\n            b[i] = (a[i + 1] - a[i]) / h[i] - h[i] * (c[i + 1] + 2 * c[i]) / 3;\n            d[i] = (c[i + 1] - c[i]) / (3 * h[i]);\n        }\n        this.x = x.slice(0, n + 1);\n        this.a = a.slice(0, n);\n        this.b = b;\n        this.c = c.slice(0, n);\n        this.d = d;\n    }\n    CubicSpline.prototype.derivative = function() {\n        var c, d, s, x, _i, _j, _len, _len2, _ref, _ref2, _ref3;\n        s = new this.constructor();\n        s.x = this.x.slice(0, this.x.length);\n        s.a = this.b.slice(0, this.b.length);\n        _ref = this.c;\n        for(_i = 0, _len = _ref.length; _i < _len; _i++){\n            c = _ref[_i];\n            s.b = 2 * c;\n        }\n        _ref2 = this.d;\n        for(_j = 0, _len2 = _ref2.length; _j < _len2; _j++){\n            d = _ref2[_j];\n            s.c = 3 * d;\n        }\n        for(x = 0, _ref3 = this.d.length; 0 <= _ref3 ? x < _ref3 : x > _ref3; 0 <= _ref3 ? x += 1 : x -= 1)s.d = 0;\n        return s;\n    };\n    CubicSpline.prototype.interpolate = function(x) {\n        var deltaX, i, y, _ref;\n        for(i = _ref = this.x.length - 1; _ref <= 0 ? i <= 0 : i >= 0; _ref <= 0 ? i += 1 : i -= 1){\n            if (this.x[i] <= x) break;\n        }\n        deltaX = x - this.x[i];\n        y = this.a[i] + this.b[i] * deltaX + this.c[i] * Math.pow(deltaX, 2) + this.d[i] * Math.pow(deltaX, 3);\n        return y;\n    };\n    return CubicSpline;\n}();\nmodule.exports = {\n    CubicSpline: CubicSpline,\n    MonotonicCubicSpline: MonotonicCubicSpline\n};\n\n},{}],\"9v9Uw\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nconst scale = (input, inMin, inMax, outMin, outMax)=>{\n    const clampedInput = Math.max(Math.min(input, inMax), inMin);\n    const normalized = (clampedInput - inMin) / (inMax - inMin);\n    const output = normalized * (outMax - outMin) + outMin;\n    return output;\n};\nexports.default = scale;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}]},[\"3qWXy\"], \"3qWXy\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=worklet.9d1dd40f.js.map\n","import { useBroadcast } from \"../lib/useBroadcast\";\nimport { generators } from \"./waveGenerators\";\n\nexport class DistortionProcessor extends AudioWorkletProcessor {\n  broadcast = useBroadcast(this.port);\n  _currentDrive: null | number = null;\n  _currentType: null | number = null;\n\n  static get parameterDescriptors() {\n    return [\n      {\n        name: \"type\",\n        minValue: 0,\n        maxValue: generators.length - 1,\n      },\n    ];\n  }\n\n  constructor() {\n    super();\n    this.port.start();\n  }\n\n  onChange() {\n    const generate = generators[this._currentType ?? 0];\n    if (!generate) {\n      console.error(\"could not find generator with index \", this._currentType);\n      return;\n    }\n    const waveData = generate(this._currentDrive ?? 0);\n    this.broadcast(waveData);\n  }\n\n  process(\n    inputs: Float32Array[][],\n    _outputs: Float32Array[][],\n    parameters: {\n      type: Float32Array;\n    },\n  ) {\n    const inputChannel = inputs?.[0]?.[0];\n\n    if (!inputChannel?.length) {\n      this._currentDrive = 0;\n      this.onChange();\n      return true;\n    }\n\n    const generatorType = parameters.type[0];\n    if (generatorType !== this._currentType) {\n      this._currentType = generatorType;\n      this.onChange();\n    }\n\n    inputChannel.forEach((drive) => {\n      if (drive !== this._currentDrive) {\n        this._currentDrive = drive;\n        this.onChange();\n      }\n    });\n\n    return true;\n  }\n}\n\n//@ts-ignore\nregisterProcessor(\"distortion-processor\", DistortionProcessor);\n","type PoolName = string | number;\n\ntype Broadcast = <T = unknown>(data: T, poolName?: PoolName) => void;\n\nexport enum Events {\n  ADD_LISTENER = \"ADD_LISTENER\",\n  REMOVE_LISTENER = \"REMOVE_LISTENER\",\n}\n\ninterface EventListener {}\n\ninterface AddListenerEvent {\n  name: \"ADD_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ninterface RemoveListenerEvent {\n  name: \"REMOVE_LISTENER\";\n  port: MessagePort;\n  poolName?: string | number;\n}\n\ntype UseBroadcastEvent = AddListenerEvent | RemoveListenerEvent;\n\nconst DEFAULT_POOL_NAME = \"default\";\n\n/**\n * hook for usage inside a worklet\n * */\nexport const useBroadcast = (port: MessagePort): Broadcast => {\n  const listeners: Record<PoolName, Array<MessagePort>> = {\n    [DEFAULT_POOL_NAME]: [],\n  };\n  port.addEventListener(\n    \"message\",\n    ({ data }: MessageEvent<UseBroadcastEvent>) => {\n      if (data.name === \"ADD_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n      if (data.name === \"REMOVE_LISTENER\") {\n        const poolName = data.poolName ?? DEFAULT_POOL_NAME;\n        if (!listeners[poolName]) {\n          listeners[poolName] = [];\n        }\n        listeners[poolName].push(data.port);\n      }\n    },\n  );\n\n  return (data, index = DEFAULT_POOL_NAME) => {\n    return listeners[index]?.forEach((listener) => listener.postMessage(data));\n  };\n};\n\n/**\n * helpers for usage outside or audio worklet\n * */\nexport const addBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"ADD_LISTENER\",\n      port: listenerPort,\n      poolName,\n    },\n    [listenerPort],\n  );\n};\n\nexport const removeBroadcastListener = (\n  broadcastPort: MessagePort,\n  listenerPort: MessagePort,\n  poolName?: PoolName,\n) => {\n  broadcastPort.postMessage(\n    {\n      name: \"REMOVE_LISTENER\",\n      // port: listenerPort,\n      poolName,\n    },\n    [],\n  );\n};\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import { generateWave } from \"../lib/generateWave\";\nimport scale from \"../lib/scale\";\n\nexport const generateClipperWave = (\n  drive: number = 0,\n  bufferSize: number = 1024,\n) => {\n  const x1 = scale(drive, 0, 1, 0, 0.46);\n  const x2 = scale(drive, 0, 1, 1, 0.54);\n  const points = [\n    {\n      x: x1,\n      y: 0,\n    },\n    {\n      x: x2,\n      y: 1,\n    },\n  ];\n\n  return generateWave(points, \"monotonic\", bufferSize);\n};\n\nexport const generateAnalogWarmWave = (\n  drive: number = 0,\n  bufferSize: number = 1024,\n) => {\n  const x1 = scale(drive, 0, 1, 0.25, 0.35);\n  const x2 = scale(drive, 0, 1, 0.75, 0.65);\n  const points = [\n    {\n      x: 0,\n      y: 0,\n    },\n    {\n      x: x1,\n      y: 0.25,\n    },\n    {\n      x: x2,\n      y: 0.75,\n    },\n    {\n      x: 1,\n      y: 1,\n    },\n  ];\n\n  return generateWave(points, \"monotonic\", bufferSize);\n};\n\nexport const generateFuzzWave = (\n  drive: number = 0,\n  bufferSize: number = 1024,\n) => {\n  const x1 = scale(drive, 0, 1, 0, 0.25);\n  const x2 = scale(drive, 0, 1, 0.25, 0.32);\n  const x3 = scale(drive, 0, 1, 1, 0.6);\n  const points = [\n    {\n      x: x1,\n      y: 0,\n    },\n    {\n      x: x2,\n      y: 0.25,\n    },\n    {\n      x: 0.5,\n      y: 0.5,\n    },\n    {\n      x: x3,\n      y: 1,\n    },\n  ];\n\n  return generateWave(points, \"monotonic\", bufferSize);\n};\n\nexport const generators = [generateClipperWave, generateAnalogWarmWave, generateFuzzWave];\n","//@ts-ignore\nimport { MonotonicCubicSpline, CubicSpline } from \"splines\";\n\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport type Points = Array<{ x: number; y: number }>;\n\nexport type SplineType = \"monotonic\" | \"natural\";\n\nexport const generateWave = (\n  points: Points = [],\n  type: SplineType = \"monotonic\",\n  samples: number = Math.pow(2, 16),\n): Float32Array | null => {\n  if (!points.length) {\n    return null;\n  }\n\n  const [xSeries, ySeries] = points.reduce(\n    ([xAcc, yAcc], { x, y }) => [\n      [...xAcc, x * samples],\n      [...yAcc, y],\n    ],\n    [[], []] as [Array<number>, Array<number>],\n  );\n\n  const ySeriesInterpolated = new Float32Array(samples).fill(0);\n\n  const SplineInterpolator =\n    type === \"monotonic\" ? MonotonicCubicSpline : CubicSpline;\n  const splineInterpolator = new SplineInterpolator(xSeries, ySeries);\n\n  // before the first point (if not at the left of the canvas)\n  for (let x = 0; x < Math.ceil(xSeries[0]); x++) {\n    const y = ySeries[0];\n    // copying the inteprolated values in a buffer\n    ySeriesInterpolated[x] = y;\n  }\n\n  // between the first and the last point\n  for (\n    let x = Math.ceil(xSeries[0]);\n    x < Math.ceil(xSeries[xSeries.length - 1]);\n    x++\n  ) {\n    const y = splineInterpolator.interpolate(x);\n\n    // copying the inteprolated values in a buffer\n    ySeriesInterpolated[x] = y;\n  }\n\n  // after the last point (if not at the right of the canvas)\n  for (var x = Math.ceil(xSeries[xSeries.length - 1]); x < samples; x++) {\n    const y = ySeries[ySeries.length - 1];\n\n    // copying the inteprolated values in a buffer\n    ySeriesInterpolated[x] = y;\n  }\n\n  const audioData = new Float32Array(\n    ySeriesInterpolated.map((value) => {\n      const newValue = value * 2 - 1;\n\n      if (newValue > 1) {\n        return 1;\n      }\n      if (newValue < -1) {\n        return -1;\n      }\n\n      return newValue;\n    }),\n  );\n\n  return audioData;\n};\n","/**\n * by George MacKerron, mackerron.com\n *\n * Monotonic Cubic Spline:\n *\n *  adapted from:\n *     http://sourceforge.net/mailarchive/forum.php?thread_name=EC90C5C6-C982-4F49-8D46-A64F270C5247%40gmail.com&forum_name=matplotlib-users\n *     (easier to read at http://old.nabble.com/%22Piecewise-Cubic-Hermite-Interpolating-Polynomial%22-in-python-td25204843.html)\n *\n *  with help from:\n *      F N Fritsch & R E Carlson (1980) 'Monotone Piecewise Cubic Interpolation', SIAM Journal of Numerical Analysis 17(2), 238 - 246.\n *      http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n *      http://en.wikipedia.org/wiki/Cubic_Hermite_spline\n *\n *\n *  Natural and Clamped:\n *\n *  adapted from:\n *      http://www.michonline.com/ryan/csc/m510/splinepresent.html\n **/\n\nvar CubicSpline, MonotonicCubicSpline;\n\n\nMonotonicCubicSpline = function () {\n    function MonotonicCubicSpline(x, y) {\n\n        var alpha, beta, delta, dist, i, m, n, tau, to_fix, _i, _j, _len, _len2, _ref, _ref2, _ref3, _ref4;\n\n        n = x.length;\n        delta = [];\n        m = [];\n        alpha = [];\n        beta = [];\n        dist = [];\n        tau = [];\n\n        for (i = 0, _ref = n - 1; (0 <= _ref ? i < _ref : i > _ref); (0 <= _ref ? i += 1 : i -= 1)) {\n            delta[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n            if (i > 0) {\n                m[i] = (delta[i - 1] + delta[i]) / 2;\n            }\n        }\n\n        m[0] = delta[0];\n        m[n - 1] = delta[n - 2];\n        to_fix = [];\n\n        for (i = 0, _ref2 = n - 1; (0 <= _ref2 ? i < _ref2 : i > _ref2); (0 <= _ref2 ? i += 1 : i -= 1)) {\n            if (delta[i] === 0) {\n                to_fix.push(i);\n            }\n        }\n\n        for (_i = 0, _len = to_fix.length; _i < _len; _i++) {\n            i = to_fix[_i];\n            m[i] = m[i + 1] = 0;\n        }\n\n        for (i = 0, _ref3 = n - 1; (0 <= _ref3 ? i < _ref3 : i > _ref3); (0 <= _ref3 ? i += 1 : i -= 1)) {\n            alpha[i] = m[i] / delta[i];\n            beta[i] = m[i + 1] / delta[i];\n            dist[i] = Math.pow(alpha[i], 2) + Math.pow(beta[i], 2);\n            tau[i] = 3 / Math.sqrt(dist[i]);\n        }\n\n\n        to_fix = [];\n\n        for (i = 0, _ref4 = n - 1; (0 <= _ref4 ? i < _ref4 : i > _ref4); (0 <= _ref4 ? i += 1 : i -= 1)) {\n            if (dist[i] > 9) {\n                to_fix.push(i);\n            }\n        }\n\n        for (_j = 0, _len2 = to_fix.length; _j < _len2; _j++) {\n            i = to_fix[_j];\n            m[i] = tau[i] * alpha[i] * delta[i];\n            m[i + 1] = tau[i] * beta[i] * delta[i];\n        }\n\n        this.x = x.slice(0, n);\n        this.y = y.slice(0, n);\n        this.m = m;\n    }\n\n    MonotonicCubicSpline.prototype.interpolate = function (x) {\n        var h, h00, h01, h10, h11, i, t, t2, t3, y, _ref;\n\n        for (i = _ref = this.x.length - 2; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            if (this.x[i] <= x) {\n                break;\n            }\n        }\n\n        h = this.x[i + 1] - this.x[i];\n        t = (x - this.x[i]) / h;\n        t2 = Math.pow(t, 2);\n        t3 = Math.pow(t, 3);\n        h00 = 2 * t3 - 3 * t2 + 1;\n        h10 = t3 - 2 * t2 + t;\n        h01 = -2 * t3 + 3 * t2;\n        h11 = t3 - t2;\n        y = h00 * this.y[i] + h10 * h * this.m[i] + h01 * this.y[i + 1] + h11 * h * this.m[i + 1];\n\n        return y;\n    };\n\n    return MonotonicCubicSpline;\n}();\n\n\nCubicSpline = function () {\n    function CubicSpline(x, a, d0, dn) {\n\n        var b, c, clamped, d, h, i, k, l, n, s, u, y, z, _ref;\n\n        if (!((x != null) && (a != null))) {\n            return;\n        }\n\n        clamped = (d0 != null) && (dn != null);\n        n = x.length - 1;\n        h = [];\n        y = [];\n        l = [];\n        u = [];\n        z = [];\n        c = [];\n        b = [];\n        d = [];\n        k = [];\n        s = [];\n\n        for (i = 0; (0 <= n ? i < n : i > n); (0 <= n ? i += 1 : i -= 1)) {\n            h[i] = x[i + 1] - x[i];\n            k[i] = a[i + 1] - a[i];\n            s[i] = k[i] / h[i];\n        }\n\n        if (clamped) {\n            y[0] = 3 * (a[1] - a[0]) / h[0] - 3 * d0;\n            y[n] = 3 * dn - 3 * (a[n] - a[n - 1]) / h[n - 1];\n        }\n\n        for (i = 1; (1 <= n ? i < n : i > n); (1 <= n ? i += 1 : i -= 1)) {\n            y[i] = 3 / h[i] * (a[i + 1] - a[i]) - 3 / h[i - 1] * (a[i] - a[i - 1]);\n        }\n\n        if (clamped) {\n            l[0] = 2 * h[0];\n            u[0] = 0.5;\n            z[0] = y[0] / l[0];\n        } else {\n            l[0] = 1;\n            u[0] = 0;\n            z[0] = 0;\n        }\n\n        for (i = 1; (1 <= n ? i < n : i > n); (1 <= n ? i += 1 : i -= 1)) {\n            l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * u[i - 1];\n            u[i] = h[i] / l[i];\n            z[i] = (y[i] - h[i - 1] * z[i - 1]) / l[i];\n        }\n\n        if (clamped) {\n            l[n] = h[n - 1] * (2 - u[n - 1]);\n            z[n] = (y[n] - h[n - 1] * z[n - 1]) / l[n];\n            c[n] = z[n];\n        } else {\n            l[n] = 1;\n            z[n] = 0;\n            c[n] = 0;\n        }\n\n        for (i = _ref = n - 1; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            c[i] = z[i] - u[i] * c[i + 1];\n            b[i] = (a[i + 1] - a[i]) / h[i] - h[i] * (c[i + 1] + 2 * c[i]) / 3;\n            d[i] = (c[i + 1] - c[i]) / (3 * h[i]);\n        }\n\n        this.x = x.slice(0, n + 1);\n        this.a = a.slice(0, n);\n        this.b = b;\n        this.c = c.slice(0, n);\n        this.d = d;\n    }\n\n    CubicSpline.prototype.derivative = function () {\n\n        var c, d, s, x, _i, _j, _len, _len2, _ref, _ref2, _ref3;\n\n        s = new this.constructor();\n        s.x = this.x.slice(0, this.x.length);\n        s.a = this.b.slice(0, this.b.length);\n        _ref = this.c;\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            c = _ref[_i];\n            s.b = 2 * c;\n        }\n        _ref2 = this.d;\n\n        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n            d = _ref2[_j];\n            s.c = 3 * d;\n        }\n\n        for (x = 0, _ref3 = this.d.length; (0 <= _ref3 ? x < _ref3 : x > _ref3); (0 <= _ref3 ? x += 1 : x -= 1)) {\n            s.d = 0;\n        }\n\n        return s;\n    };\n\n\n    CubicSpline.prototype.interpolate = function (x) {\n\n        var deltaX, i, y, _ref;\n\n        for (i = _ref = this.x.length - 1; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            if (this.x[i] <= x) {\n                break;\n            }\n        }\n\n        deltaX = x - this.x[i];\n        y = this.a[i] + this.b[i] * deltaX + this.c[i] * Math.pow(deltaX, 2) + this.d[i] * Math.pow(deltaX, 3);\n\n        return y;\n    };\n\n    return CubicSpline;\n}();\n\nmodule.exports = {\n    CubicSpline: CubicSpline,\n    MonotonicCubicSpline: MonotonicCubicSpline\n};","const scale = (\n  input: number,\n  inMin: number,\n  inMax: number,\n  outMin: number,\n  outMax: number\n): number => {\n  const clampedInput = Math.max(Math.min(input, inMax), inMin);\n  const normalized = (clampedInput - inMin) / (inMax - inMin);\n  const output = normalized * (outMax - outMin) + outMin;\n\n  return output;\n};\n\nexport default scale;\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","DistortionProcessor","_useBroadcast","_waveGenerators","AudioWorkletProcessor","broadcast","useBroadcast","port","_currentDrive","_currentType","parameterDescriptors","minValue","maxValue","generators","constructor","start","onChange","generate","console","error","waveData","process","inputs","_outputs","parameters","inputChannel","generatorType","type","forEach","drive","registerProcessor","Events","addBroadcastListener","removeBroadcastListener","DEFAULT_POOL_NAME","listeners","addEventListener","data","poolName","push","index","listener","postMessage","broadcastPort","listenerPort","interopDefault","a","__esModule","default","value","exportAll","source","dest","keys","key","prototype","hasOwnProperty","enumerable","destName","generateClipperWave","generateAnalogWarmWave","generateFuzzWave","_generateWave","_scale","_scaleDefault","bufferSize","x1","x2","generateWave","y","x3","_splines","points","samples","Math","xSeries","ySeries","reduce","xAcc","yAcc","ySeriesInterpolated","Float32Array","fill","splineInterpolator","MonotonicCubicSpline","CubicSpline","ceil","interpolate","map","newValue","alpha","beta","delta","dist","m","n","tau","to_fix","_i","_j","_len","_len2","_ref","_ref2","_ref3","_ref4","pow","sqrt","slice","h","h00","h01","h10","h11","t","t2","t3","d0","dn","b","c","clamped","d","k","l","s","u","z","derivative","deltaX","input","inMin","inMax","outMin","outMax","normalized","clampedInput","max","min"],"version":3,"file":"worklet.9d1dd40f.js.map"}
{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,I,C,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,Q,C,S,C,C,C,C,C,E,I,E,E,kD,E,iB,C,GCSA,EAAA,MAAA,CAAA,EAAA,sBAAA,IAAa,EAAP,OAAO,UAA4B,sBACvC,KAAyB,IAAK,AAC9B,CAAA,cAAyB,CAAA,CAAM,AAC/B,CAAA,YAAuB,CAAA,CAAM,AAC7B,CAAA,UAAqB,CAAA,CAAM,AAC3B,CAAA,OAAiB,CAAE,AACnB,CAAA,WAAqB,CAAE,AAEvB,YAAW,sBAAX,CACE,MAAO,CACL,CACE,KAAM,OACN,eAAgB,SAChB,aAAc,EACd,SAAU,EACV,SAAU,CACX,EACD,CACE,KAAM,UACN,eAAgB,SAChB,aAAc,EACd,SAAU,EACV,SAAU,CACX,EACD,CACE,KAAM,OACN,eAAgB,SAChB,aAAc,EACd,SAAU,CACX,EACD,CACE,KAAM,QACN,eAAgB,SAChB,aAAc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","sources":["<anon>","packages/base-nodes/src/audioNodes/audioTrack/worklet.ts","node_modules/.pnpm/@parcel+transformer-js@2.12.0_@parcel+core@2.12.0_@swc+helpers@0.5.13_/node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"926At\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AudioTrackProcessor\", ()=>AudioTrackProcessor);\nconst GATE_THRESHOLD = 0.5;\nclass AudioTrackProcessor extends AudioWorkletProcessor {\n    data = null;\n    prevGateState = false;\n    isTriggered = false;\n    isPlaying = false;\n    cursor = 0;\n    prevCursor = 0;\n    static get parameterDescriptors() {\n        return [\n            {\n                name: \"gate\",\n                automationRate: \"a-rate\",\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1\n            },\n            {\n                name: \"restart\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0,\n                maxValue: 1\n            },\n            {\n                name: \"loop\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            },\n            {\n                name: \"start\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            },\n            {\n                name: \"end\",\n                automationRate: \"k-rate\",\n                defaultValue: 0,\n                minValue: 0\n            }\n        ];\n    }\n    constructor(){\n        super();\n        this.port.onmessage = ({ data })=>{\n            if (data.name === \"track\") this.data = data.data;\n            this.port.postMessage({\n                name: \"track\",\n                data: data.data\n            });\n        };\n    }\n    emitProgressEvent() {\n        if (this.cursor === this.prevCursor) return;\n        this.port.postMessage({\n            name: \"time\",\n            cursor: this.cursor,\n            seconds: this.cursor / sampleRate,\n            progress: this.cursor / this.data.length\n        });\n        this.prevCursor = this.cursor;\n    }\n    useTrigger(channel, onTriggerCallback) {\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= GATE_THRESHOLD && !this.isTriggered) {\n                this.isTriggered = true;\n                onTriggerCallback();\n            }\n            if (value < GATE_THRESHOLD && this.isTriggered) this.isTriggered = false;\n        }\n    }\n    useGate(channel, onPlayCallback, onStopCallback) {\n        for(let i = 0; i < channel.length; i++){\n            const value = channel[i];\n            if (value >= GATE_THRESHOLD && !this.isPlaying) this.isPlaying = true;\n            if (value < GATE_THRESHOLD && this.isPlaying) this.isPlaying = false;\n        }\n        if (this.isPlaying) onPlayCallback();\n        else onStopCallback();\n    }\n    process(inputs, outputs, parameters) {\n        if (!this.data) return true;\n        const { gate, loop, start, end, restart } = parameters;\n        const [output, gateOutput] = outputs;\n        this.useTrigger(restart, ()=>{\n            this.cursor = start[0] * sampleRate;\n        });\n        this.useGate(gate, ()=>{\n            const endCursor = end[0] * sampleRate;\n            if (this.cursor > (endCursor || this.data.length)) {\n                if (loop[0] === 1) {\n                    this.cursor = start[0] * sampleRate;\n                    console.log(\"track ended, loop on\");\n                } else return true;\n            }\n            const bufferLength = outputs[0][0].length;\n            output.forEach((channel, index)=>{\n                channel.set(this.data.channelData[index].slice(this.cursor, this.cursor + bufferLength));\n            });\n            gateOutput.forEach((channel, index)=>{\n                for(let i = 0; i < channel.length; i++)channel[i] = 1;\n            });\n            this.cursor += bufferLength;\n            this.emitProgressEvent();\n        }, ()=>{\n            gateOutput.forEach((channel, index)=>{\n                for(let i = 0; i < channel.length; i++)channel[i] = 0;\n            });\n            this.cursor = start[0] * sampleRate;\n            this.emitProgressEvent();\n        });\n        return true;\n    }\n}\ntry {\n    //@ts-ignore\n    registerProcessor(\"audio-track-processor\", AudioTrackProcessor);\n} catch (e) {}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"4w0m1\"}],\"4w0m1\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"926At\"], \"926At\", \"parcelRequirec6d8\")\n\n//# sourceMappingURL=worklet.934a014b.js.map\n","interface TrackData {\n  duration: AudioBuffer[\"duration\"];\n  length: AudioBuffer[\"length\"];\n  sampleRate: AudioBuffer[\"sampleRate\"];\n  channelData: [Float32Array, Float32Array];\n}\n\nconst GATE_THRESHOLD = 0.5;\n\nexport class AudioTrackProcessor extends AudioWorkletProcessor {\n  data: TrackData | null = null;\n  prevGateState: boolean = false;\n  isTriggered: boolean = false;\n  isPlaying: boolean = false;\n  cursor: number = 0;\n  prevCursor: number = 0;\n\n  static get parameterDescriptors() {\n    return [\n      {\n        name: \"gate\",\n        automationRate: \"a-rate\",\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n      },\n      {\n        name: \"restart\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n        maxValue: 1,\n      },\n      {\n        name: \"loop\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n      {\n        name: \"start\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n      {\n        name: \"end\",\n        automationRate: \"k-rate\",\n        defaultValue: 0,\n        minValue: 0,\n      },\n    ];\n  }\n\n  constructor() {\n    super();\n\n    this.port.onmessage = ({\n      data,\n    }: MessageEvent<{ name: \"track\"; data: TrackData }>) => {\n      if (data.name === \"track\") {\n        this.data = data.data;\n      }\n      this.port.postMessage({\n        name: \"track\",\n        data: data.data,\n      });\n    };\n  }\n\n  emitProgressEvent() {\n    if (this.cursor === this.prevCursor) {\n      return;\n    }\n    this.port.postMessage({\n      name: \"time\",\n      cursor: this.cursor,\n      seconds: this.cursor / sampleRate,\n      progress: this.cursor / this.data.length,\n    });\n    this.prevCursor = this.cursor;\n  }\n\n  useTrigger(channel: Float32Array, onTriggerCallback: () => void) {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= GATE_THRESHOLD && !this.isTriggered) {\n        this.isTriggered = true;\n        onTriggerCallback();\n      }\n      if (value < GATE_THRESHOLD && this.isTriggered) {\n        this.isTriggered = false;\n      }\n    }\n  }\n\n  useGate(\n    channel: Float32Array,\n    onPlayCallback: () => void,\n    onStopCallback: () => void,\n  ) {\n    for (let i = 0; i < channel.length; i++) {\n      const value = channel[i];\n      if (value >= GATE_THRESHOLD && !this.isPlaying) {\n        this.isPlaying = true;\n      }\n      if (value < GATE_THRESHOLD && this.isPlaying) {\n        this.isPlaying = false;\n      }\n    }\n    if (this.isPlaying) {\n      onPlayCallback();\n    } else {\n      onStopCallback();\n    }\n  }\n\n  process(\n    inputs: Float32Array[][],\n    outputs: Float32Array[][],\n    parameters: {\n      gate: Float32Array;\n      restart: Float32Array;\n      start: Float32Array;\n      end: Float32Array;\n      loop: Float32Array;\n    },\n  ) {\n    if (!this.data) {\n      return true;\n    }\n    const { gate, loop, start, end, restart } = parameters;\n    const [output, gateOutput] = outputs;\n\n    this.useTrigger(restart, () => {\n      this.cursor = start[0] * sampleRate;\n    });\n\n    this.useGate(\n      gate,\n      () => {\n        const endCursor = end[0] * sampleRate;\n        if (this.cursor > (endCursor || this.data.length)) {\n          if (loop[0] === 1) {\n            this.cursor = start[0] * sampleRate;\n            console.log(\"track ended, loop on\");\n          } else {\n            return true;\n          }\n        }\n        const bufferLength = outputs[0][0].length;\n        output.forEach((channel, index) => {\n          channel.set(\n            this.data.channelData[index].slice(\n              this.cursor,\n              this.cursor + bufferLength,\n            ),\n          );\n        });\n\n        gateOutput.forEach((channel, index) => {\n          for (let i = 0; i < channel.length; i++) {\n            channel[i] = 1;\n          }\n        });\n        this.cursor += bufferLength;\n        this.emitProgressEvent();\n      },\n      () => {\n        gateOutput.forEach((channel, index) => {\n          for (let i = 0; i < channel.length; i++) {\n            channel[i] = 0;\n          }\n        });\n        this.cursor = start[0] * sampleRate;\n        this.emitProgressEvent();\n      },\n    );\n    return true;\n  }\n}\n\ntry {\n  //@ts-ignore\n  registerProcessor(\"audio-track-processor\", AudioTrackProcessor);\n} catch (e) {}\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","defineInteropFlag","export","AudioTrackProcessor","AudioWorkletProcessor","data","prevGateState","isTriggered","isPlaying","cursor","prevCursor","parameterDescriptors","automationRate","defaultValue","minValue","maxValue","constructor","port","onmessage","postMessage","emitProgressEvent","seconds","sampleRate","progress","useTrigger","channel","onTriggerCallback","value","useGate","onPlayCallback","onStopCallback","process","inputs","outputs","parameters","gate","loop","start","end","restart","output","gateOutput","endCursor","console","log","bufferLength","forEach","index","set","channelData","slice","registerProcessor","e","interopDefault","a","__esModule","default","exportAll","source","dest","keys","key","prototype","hasOwnProperty","enumerable","destName"],"version":3,"file":"worklet.934a014b.js.map"}